#ifndef D_GPRIVATE
#define D_GPRIVATE
#include<X11/Xlib.h>
#include <pthread.h>
#include "kulina.h"
#include "uievent.h"
#include "dlink.h"
#define UNSIGNED unsigned short

     
typedef struct
    {
      float xstr;
      float ystr;
      float zstr;
    }str1;

typedef struct _box3d{
  float xmin,ymin,zmin,xmax,ymax,zmax,xe,ye,ze,xc,yc,zc,d;
} Box3D;
typedef struct _kg_colr {
  int red,green,blue;
  XColor Col;
  unsigned long  clrtbl;
} kgColor;
typedef struct twin
            {int xl;int yl;int xu;int yu;int nchr;
             int xp;int yp;int w;
            } TWIN;
typedef struct line {float x1;float x2;int p;float ymax;float ymin;
                     struct line *Pr;struct line *Nx;} L_N;
typedef struct point {float x;float y;float xl;
                     struct point *Pr;struct point *Nx;} B_K;
typedef struct _window_context {
  void *Clip;
  pthread_t Pth;
  pthread_mutex_t Dsplock;
  int EVGAX,EVGAY;
  unsigned long ActWin;
//  Pixmap ActWin;
  int c_v_x1,c_v_y1,c_v_x2,c_v_y2;
  int c_v_x1_o,c_v_y1_o,c_v_x2_o,c_v_y2_o;
  int s_v_x1,s_v_y1,s_v_x2,s_v_y2;
  DIALOG *D;
  Display *Dsp;
  XImage *IMAGE,*IMAGEBAK;
  Window Win;
  Pixmap Pix,Piximg,DspWin,linebuf,WIN;
  GC Gc;
  Colormap Cmap;
  int Dpth,FullScreen,ExposeWin;
  Dlink *SBlist;
  unsigned int c_color;
  kgColor *kgcolors; //color code for graphics and Ui
  Dlink *TLIST;
  int Update;
  short msg_x,msg_y;
  int REDMASK,GREENMASK,BlUEMASK,REDMASKPOS,GREENMASKPOS,BLUEMASKPOS;
  int DefGuiFontEntry;
  Cursor HideCur;
  int GuiFont;
  int GuiFontSize;
  XEvent event;
  XEvent eventback;
  unsigned long ALPHA;
  Cursor CurrCur;
  Window Root,Parent;
  pthread_t Rth;
  pthread_mutex_t Rlock;
  char *Pstr; // Primary Selection
  char *Cstr; //  Clipboard String
  int Hlt;  // Highlight on or off
  char **cpmenu;
  int (*cpCallback)(int,void *);
} kgWC;
typedef struct _drawing_context {
  kgWC *wc;
  L_N *O_L;
  B_K *O_P,*D_P;
  L_N *FO_L,*pt;
  B_K *FB_P;
  char reviewfile[200]; //Name for review file
  char plotfile[200]; //Name for review file
  char backup[200]; //Name for backup file
  char cmdsfile[200]; //Name for backup file
  char objdir[200]; //directory for objects
  int A_size;
  unsigned int *cmds;
  float cur_x,cur_y,cur_z;
  float vu_x1,vu_y1,vu_x2,vu_y2;
  int v_x1,v_y1,v_x2,v_y2;
  int D_x,D_y,V_x,V_y;
  int lcur_x,lcur_y,rcur_x,rcur_y;   
  float u_x,u_y,v_r;
  int ln_color; // line/marker color;
  int ln_style; // line style
  int ln_width; // line style
  int m_style; // marker type
  int font;
  int txt_color;
  float Slant,theta;
  float txt_wt,txt_wtx,txt_wty;
  float txt_ht,txt_wd,txt_sp;
  float txt_htx,txt_wdx,txt_spx;
  float txt_hty,txt_wdy,txt_spy;
  float txt_w42,txt_h42;
  float w_x1,w_y1,w_x2,w_y2;
  float r_d;
  int t_fill,t_bodr,t_pattern,t_bkgr,t_color,c_color;
  int txt_bold,trot,t_font;
  int fil_color,bod_width,bod_color;
  int v_xt1,v_yt1;
  int pr_txt,c_bound;
  float jmpy,ylcur,yrcur;
  int DBL_BUF,DOUBLE,D_ON;
  float pmax,pmin,dfac;    //setting for gourard fill
  int max_clr,min_clr,Cutoff;
  int ibdr;
     int entry,jmp;
     int xmin,ymin,xmax,ymax,xrbr,yrbr;
     short hbuf,rbuf,nmenu;
     short greek;
     int *icxv,*icyv;
     int *icpos;
     float *m_f;
     float fact;
     float cost,sint;
     int gcur_x,gcur_y,gcur_r;
     float gcur_t,gcur_ds;
     int po_cur_x,po_cur_y;
     float gw_x1,gw_y1,gw_x2,gw_y2;
     int msg_x,msg_y;
     float xpos,ypos,txs,txc;
     float cx,cy,xp,yp;
     int st_ptr[10];
     int x2,y2;
     int *icpostmp, *icxvtmp,*icyvtmp;
     Box3D box3d;
     int SET3D,PROJ,TIFF,ZBUFF;
     float TC[16],TE[16],FM[16];
     float TX[16],TY[16],TZ[16];
     float TM[16],T1[16],TR[16];
     str1 newstr,trnstr;
     float xe,ye,ze,zc,xeo,yeo,zeo;
     float clip_min,clip_max;
     float CPCONS;
     unsigned short   *zbuf,*redbuf,*greenbuf,*bluebuf,*clrbuf;
     unsigned long Z_max;
     Dlink * ls_list;
     int No_of_lights;
     float Fx,Fy,Sx,Sy;
     char Posfmt[200], Xfmt[7],Yfmt[7];
     unsigned int ln_ptn[10];
     int MAG,EVGAX,EVGAY;
     int *icxvf0,*icyvf0;
     int *icposf0;
     float *m_f0;
     Dlink *Fontlist;
} kgDC;
#define WC(x) ((kgWC *)(((DIALOG *)x)->wc))
#define DC(x,i) ((kgrDC *)(((DIALOG *)x)->d[i].g->dc))
#define GBOX(x,i) ((DIG *)(((DIALOG *)x)->d[i].g))
typedef struct Scrn {int x1;int y1;int x2;int y2;Pixmap buf;
            struct Scrn *nx;struct Scrn *pv;} SC_BUF;
typedef struct menu_str {
      int ixx;
      int iyy;
      int imenu;
      int ichr;
      char *cmenu;
      int item;
      int thirty;
      int ixl;
      int iyl;
      int ixu;
      int iyu;
      unsigned int color1;
      unsigned int color2;
      unsigned int char_clr;
      int nitems;
      int por;
      int pos;
      float fac;
      char **menu;
 } MENU_STR;
#define Set_Off(x,n) (x).prop[(n)-1]= 0
#define Set_On(x,n) (x).prop[(n)-1]= 1
#define Set_Def(x,n) (x).cur_item= n
#define Set_All_On(x) {\
  int i;\
  for(i=0;i<(x).nitem;i++) (x).prop[i]=1;\
 }
#define Set_All_Off(x) {\
  int i;\
  for(i=0;i<(x).nitem;i++) (x).prop[i]=0;\
 }
typedef struct{
   int     nitem;
   char      *prompts[MAXITEMS];
   char      *fields[MAXITEMS];
}Tmenu;
void set_menu_position(int xmenu,int ymenu);
typedef struct txt_str {
     int x1;
     int y1;
     int x2;
     int y2;
     int width;
     int nx;
     int ny;
     int *ln;
     T_ELMT *elmt;
     int col;
     int row;
     DIALOG *D;
     Gclr gc;
     DIT *T;
   } TX_STR;
typedef struct st_str {
     int x;
     int y;
     int l;
     int min;
     int max;
     int df;
     double fac;
     char code;
     double cf;
     double sh;
     int Sldwd ,Sw,Sdpw;
     int fill_clr;
     int char_clr;
     int slide_fill_clr;
     int bright_clr;
     struct st_str* nx;
     int id; //item id in Dia struct
     DIALOG *D;
     void *Widget;
     void *bimg,*fimg;
     int dir;
 } S_STR;
typedef struct b_str {
        int x1; /* (0,0) is upper left corner */
        int y1;
        int x2;
        int y2;
        int nxb;
        int nyb;
        int b_w;
        int b_h;
        char **title;
        void **xpm;
        int *bkgr; /* back ground colours */
        int df;
        int *sw;
        struct b_str* nx;
        DIALOG *D;
        int Hsize;
        int type;
        float fac;
        int xgap,ygap;
        void *Widget;
        int bordr;
} BUTS;
typedef struct brw_str {
     int x1;
     int y1;
     int x2;
     int y2;
     int xb;
     int width;
     char **menu;
     int pos;
     int df;
     int size;
     int hitem;
     MENU_STR MS;
     struct brw_str *nx;
     DIALOG *D;
     Gclr gc;
     int offset,w,tbx1,tby1,tbx2,tby2,bbx1,bby1,bbx2,bby2,lbx1,lby1,lbx2,lby2,rbx1,rby1,rsx1,rsy1,rsx2,rsy2;
     int sy,shy,sx,shx;
     int bsx1,bsy1,bsx2,bsy2;
     float fac,bfac;
     int scroll;
     int xshift;
     void *wid;
     void *Widget;
     int BxSize;
} BRW_STR;
#define WAIT(pid) {\
  pid_t w;\
  int status;\
  do { \
                   w = waitpid(pid, &status, WUNTRACED | WCONTINUED); \
                   if (w == -1) { \
                       perror("waitpid"); \
                       exit(EXIT_FAILURE); \
                   }\
               } while (!WIFEXITED(status) && !WIFSIGNALED(status));\
}
TX_STR *get_txt_str(int n);
void clear_txt_str(void);
int put_text_box (int X1,int Y1,int width,int nx,int ny,
     T_ELMT *elmt);
int put_table_box (int X1,int Y1,int width,int nx,int ny,
     T_ELMT *elmt);
int read_txt_box(int b,T_ELMT *e);
int create_slide_str(int min,int max,int x,int y,int l,
        int df,double fac,char code,double cf,double sh);
S_STR *get_slide_str(int n);
void clear_slide_str(void);

int SLIDE(int n);
double init_slide_pointer( int xx,int yy,int l,int w,int size,int df);
int set_slide_int(int min,int max,int x,int y,int l,int df,
      char ch,double cf,double sh) ;
int create_but_str(int x1,int y1,int xgap,int ygap,int nxb,int nyb,
      int b_w,int b_h,int df,char **title,void *xpm,int *bkgr,int *sw);
void clear_but_str(void);
BUTS *get_but_str(int);
int set_buttons(int x1,int y1,int x2,int y2,int nxb,int nyb,
           int b_w,int b_h,int df,char **title,void **xpm,int *bkgr) ;
int create_brw_str(int x1,int y1,int pos,int df,char **menu);
BRW_STR *get_brw_str(int n);
void clear_brw_str(void);
int put_browcer(int xx1,int yy1,int pos,int df,char **menu);
int check_brw_button(int brptr);
int check_brw_button_mod(int brptr,int size);
int CheckClickPosition( int x1,int y1,int x2,int y2) ;
typedef struct msg_str {int x;int y;char *msg;} MSG_STR;
double get_f_slide_value(int n);
int  Z_ISDIR(char *x) ;

int uiMenu(void *parent,int xx1,int yy1,int pos,int df,char **menu,int size);
int _uiMenu(DIW *w);
void _uiUnsupported(DIALOG* D,int item);
void _uiDrawPicture (DIALOG* D,int item);
void _uiDrawTransparentPicture (DIALOG* D,int item);
void _uiDrawP (DIALOG* D,int item);
void _uiDrawInfo (DIALOG* D,int item) ;
void _uiDrawFolderBrowser (DIALOG* D,int item);
void _uiDrawFileBrowser (DIALOG* D,int item);
void _uiDrawTextBox (DIALOG* D,int item);
void _uiDrawTableBox (DIALOG* D,int item);
void _uiDrawHoriButtons (DIALOG* D,int item);
//void _uiDrawButtons (DIALOG* D,int item);
void _uiDrawButtons (void *tmp);
void _uiDrawButtons_n (void *tmp);
void _dv_draw_newbutton(void *tmp,int k,int state);
void _dv_draw_button(void *tmp,int k,int state);
void _uiSlideFloat (DIALOG* D,int item);
void _uiSlideInteger (DIALOG* D,int item);
void _uiDrawBrowser (DIALOG* D,int item);
void _uiDrawMenuItem (DIALOG* D,int item);
void _uiDrawGraphicsArea (DIALOG* D,int item);
void _uiDrawMessage (DIALOG* D,int item);
void _uiDrawScrollMenu(BRW_STR *br) ;
void _uiDrawMenu(BRW_STR *br) ;
void _uiDrawMsg(DIS *w);
void _uiDrawDialogW(DIW *y);
void _uiDrawScrollMsgItem (DIALOG* D,int item);
int _ui_process_scroll_key(BRW_STR *br,KBEVENT kbe);
int _ui_process_scroll_click(BRW_STR *br,KBEVENT kbe);
int _ui_process_scroll_move(BRW_STR *br,KBEVENT kbe);
int _ui_process_newscroll_key(DIX *x,KBEVENT kbe);
int _ui_process_newscroll_click(DIX *x,KBEVENT kbe);
int _ui_process_newscroll_move(DIX *x,KBEVENT kbe);
void _uiPutmenu(BRW_STR *br);
void _uiPutmsg(BRW_STR *br);
void _uiMoveVertPointer(BRW_STR *br);
void _uiNewMoveVertPointer(BRW_STR *br);
void slide_bar(int x,int y,int l,int w,int clr,int Sdpw,int Sw);
int _ui_processslidepress(S_STR *pt,KBEVENT kbe);
int _ui_processslidekey(S_STR *pt,KBEVENT kbe);
int _ui_processslidedrag(S_STR *pt,KBEVENT kbe);
int _ui_processTextTablekey(TX_STR *t,KBEVENT kbe,int code);
int _ui_processTablekey(TX_STR *t,KBEVENT kbe,int code);
int _ui_processtextboxpress(TX_STR *t,KBEVENT kbe);
void _uiGetResolution(void);
void _ui_drawtextcursor (TX_STR *tx);
int _ui_textboxstringlength(TX_STR *tx);
int _ui_cuthighlightstring(TX_STR *tx);
void _ui_cleartexthigh (TX_STR *tx);
char *_ui_gethighlightstring(TX_STR *tx);
void _ui_cleantextcursor (TX_STR *tx);
int _uiGetSItem(KBEVENT kbe,int x1,int y1,int x2,int y2);
int _uiCheckBox(KBEVENT kbe,int x1,int y1,int x2,int y2);
void * make_browser_str(DIALOG *D,int xx1,int yy1,int pos,int df,char **menu,int size);
int _ui_updatetextbox (void *tmp);
int _ui_readtextbox(void *tmp);
void _ui_vuport(DIG *G,int x1,int y1,int x2,int y2);
void * _ui_make_browser_str(int xx1,int yy1,int pos,int df,char **menu,int size);
void * make_menu_str(DIALOG *parent,int xx1,int yy1,int pos,int df,char **menu,int size);
int uiTextMenu(void *parent,int x1,int y1,  int items,char **promt,char ** filed);
double _ui_getfslidevalue(S_STR *pt);
int  _ui_getdslidevalue(S_STR *pt);
int _ui_scroll_msg_item(BRW_STR *br,KBEVENT kbe);
int _ui_scroll_msg_key(BRW_STR *br,KBEVENT kbe);
int _ui_scroll_msg_click(BRW_STR *br,KBEVENT kbe);
int _ui_scroll_msg_move(BRW_STR *br,KBEVENT kbe);
void _uiRedrawButns(BUTS *bt);
void _ui_rmv_attention(DIALOG *D,int x1,int y1,int x2,int y2);
void _ui_draw_attention(DIALOG *D,int x1,int y1,int x2,int y2);
void _ui_Draw_Dialog_Area(DIALOG *D);
void _ui_Draw_Dialog_Area_Transparent(DIALOG *D);
 void *GetImageStruct(void *tmp);
void Diasetmenu(void *Tmp,int menu,char **list);
void * make_dialog_menu_str(DIALOG *D,DIE *w,int pos,int df,char **menu,int size);
void _uiDrawDialogMenu(BRW_STR *br);
void _Box_Fill_Transparent(int xmin,int ymin,int xmax,int ymax,float transparency);
void _Box_Fill(int xmin,int ymin,int xmax,int ymax);
void _uiBox_Fill_Transparent(kgWC *wc,int xmin,int ymin,int xmax,int ymax,float transparency);
void _uiBox_Fill(kgWC *wc,int xmin,int ymin,int xmax,int ymax);
void _ui_Draw_Dialog_Area_Transparent(DIALOG *D);
void _uirect_fill_transparent(kgWC *wc,int x1,int y1,int x2,int y2,unsigned int color,float transparency);
void t_PointerAntialiasedZoom(kgWC *wc,float *xmin,float *ymin, float *xmax,float *ymax);
void _ui_draw_menu_bound(DIALOG *D,int x1,int y1,int x2,int y2,int c_bound);
void _ui_draw_newbutton(int x1,int y1,int x2,int y2,BUTS *bt,int k,float transparency) ;
void _ui_rmvattn_newbutton(int x1,int y1,int x2,int y2,BUTS *bt,int k,float transparency) ;
void uiUpdateMsgScroll(void *tmp,int item);
void  _ui_setkernelcontext(DIALOG *D);
void _uiLine(kgWC *wc, int x1,int y1,int x2,int y2);
DIALOG *getParentDisplay(void *D);
void wcset_clr(kgWC *wc,int x);
void uiset_clr(DIALOG *D,int x);
int uiDefaultGuiFontSize(DIALOG *D);
int uiSetGuiFixFontSize(DIALOG *D,int size);
int uiSetNoechoFontSize(DIALOG *D,int size);
//void uiCloseAndGetReviewfile(DIALOG *D,char *flname) ;
void _uivert_line(kgWC *wc,int y1,int y2,int x);
void uimhori_line(kgWC *wc,int xa,int xb,int y);
void _uihori_line(kgWC *wc,int xa,int xb,int y);
void _uimhori_line(kgWC *wc,int xa,int xb,int y);
void _uigodr_line(kgWC *wc,int xa,int xb,int y,float pa,float pb);
 void ui_set_godr(DIG *G,float p2,float p1,int sclr,int n,int ib);
 void ui_godr_fill(DIG *G,int n,float *x,float *y,float *p);
void uiset_color(kgWC *wc,char color);
void uiput_pixel(kgWC *wc,int col, int row);
void uiput_byte(kgWC *wc,short col, short row);
void _uimarker (DIG *G,int x,int y);
void ui_marker (DIG *G,float x,float y);
void _uidraw_line(kgWC *wc,int x1,int y1,int x2,int y2);
void _uipoly_fill(DIG *G,int n,int *px,int *py,int flag,unsigned int b_color);
void _uimpoly_fill(kgWC *wc,int n,int *px,int *py,int *px1,int *py1,unsigned int b_color);
void _uigodard_fill(DIG *G,int n,int *px,int *py,int flag,float *pv);
void _uicircle(kgWC *wc,int x,int y,int r);
void _uicircle_fill(DIG *G,int x,int y1,int r,unsigned int color);
short uiclip_line(kgWC *wc,int *xa,int *ya,int *xb,int *yb);
int uichng_clr(DIALOG *D,int l,int ir,int ig,int ib);
void _uirect_fill(kgWC *wc,int x1,int y1,int x2,int y2,unsigned int color);
void uiCliped_Line(kgWC *wc,int x1,int y1,int x2,int y2) ;
int uiput_image(DIALOG *D,int no,int x0,int y0,int w,int l);
int uidelete_image(DIALOG *D,int no);
void uiDraw_String(DIALOG *D,int x,int y,char *str,int just);
int uiSetImageClip(DIALOG *D,int vx0,int vy0,int vx1,int vy1);
SC_BUF * wc_alloc_scrn_buffer(kgWC *wc);
SC_BUF * kg_alloc_scrn_buffer(kgWC *wc);
SC_BUF * kg_get_scrn_buffer(kgWC *wc);
int kg_release_scrn_buffer(kgWC *wc);
void kg_clear_scrn_buffer(kgWC *wc);
SC_BUF * kg_scr_back(kgWC *wc,int x1,int y1,int x2,int y2);
void kg_scr_recover(kgWC *wc);
void ui_txtwin(DIALOG *D,int ix,int iy,int chrs,int lines);
void ui_txtwinnew(DIALOG *D,int ix,int iy,int chrs,int lines,int xbdr,int ybdr);
void ui_clear_txtwin(DIALOG *D);
void uiscr_scroll_back(DIALOG *D,int x1,int y1,int x2,int y2,int width);
void uiscroll_up_twin(DIALOG *D,TWIN *Twin);
void uiscroll_up(DIALOG *D);
void ui_wprintf(DIALOG *D,char *s);
void ui_twinmove(DIALOG *D,int col,int row);
void uitwin_wprintf(DIALOG *D,void *Tmp,char *s);
void uiMenustr(DIALOG *D,int ixp,int iyp,char *cmenu,int char_clr);
void  uimsg_menu(DIG *G,int ix,int iy,int max1,char *ch1);
void _uibackup_line(kgWC *wc,int x1,int y1,int x2,int y2);
void _uirecover_line(kgWC *wc,int x1,int y1,int x2,int y2);
void uiUpdateOff(DIALOG *D);
void uiUpdateOn(DIALOG *D);
void uiUpdateScreen(kgWC *wc);
void wcset_clr(kgWC *wc,int x);
void uiinitialise(DIG *G);
void ui_ln_clr(DIG *G,int color);
void ui_ln_style(DIG *G,int styl);
void ui_lnwidth(DIG *G,int width);
void uiput_pixl(kgWC *wc,short col, short row);
void _uimove(DIG *G,int xp, int yp);
void _uidraw(DIG *G,int x, int y);
void _uidraw_(DIG *G,int x, int y);
void _ui_draw_line(kgWC *wc,int x1,int y1,int x2,int y2);
void ui_move(DIG *G,float x,float y);
void ui_draw(DIG *G,float ix,float iy);
void ui_drawimage(DIG *G,void *img,float x1,float y1,float x2,float y2);
void uiwin_drawimage(DIG *G);
void ui_smmark(DIG *G,int istl);
KBEVENT kg_getevent(DIALOG *D);
int  kg_checkevent(DIALOG *D,KBEVENT *kbe);
KBEVENT  _kgSkipMouseMove(DIALOG *D);
void ui_initialise(DIG *G);
void ui_clr_vu(DIG *G);
void _uibox_fill(kgWC *wc,int x1,int y1,int x2,int y2,unsigned int color);
void ui_vu_port(DIG *G,float x1,float y1,float x2,float y2);
void ui_window(DIG *G,float x1,float y1,float x2,float y2);
void uiBkup_clip_limits(kgWC *wc);
void uiSet_full_scrn(kgWC *wc);
void uiRest_clip_limits(kgWC *wc);
 int uiCheckClickPosition( int x1,int y1,int x2,int y2,int PON_X,int PON_Y);
void uiinfo_wprintf(DIALOG *D,void *Tmp,char *s);
void zoom_down(DIG *G);
void zoom_up(DIG *G);
void _uiDraw_Bound(kgWC *wc,int x1,int y1,int x2,int y2);
void uiPositionPointer(kgWC *wc,int x,int y);
void uiput_pixel(kgWC *wc,int col, int row);
void uiput_pixl(kgWC *wc,short col, short row);
void wcset_clr(kgWC *wc,int x);
void uigodr_line(DIG *G,int xa,int xb,int y,float pa,float pb);
void ui_txt_size(DIG *G,float ht,float wt,float sp,float htx,float wty,float spy);
void ui_txt_rot(DIG *G,float t);
void ui_txt_font(DIG *G,int font);
void ui_txt_clr(DIG *G,int color);
void ui_panel(DIG *G,float *x,float *y,int color,int flag,int n);
void ui_box_fill(DIG *G,float x1,float y1,float x2,float y2,int color,int ib);
void ui_DRAW_LINE(DIG *G,float x1,float y1,float x2,float y2);
void uiupdate_intr(DIG *G,int count,unsigned int *loc);
void uiupdate_view(DIG *G);
void uicheck_and_do(DIG *G,char ch);
void uiread_buf(DIG *G, void *ch, int n);
void uireview_cmds(DIG *G);
void uiread_file(DIG *G,int rbuf);
void uireview_file(DIG *G,char *stri);
void ui_clip_limit(DIG *G,float x1,float y1,float x2,float y2);
void ui_clear_clip(DIG *G);
void ui_pop_clip(DIG *G);
void uiclose_file(DIG *G,int *rbuf,char *reviewfile);
void uiwrite_file(DIG *G,int *rbuf,char *filename);
void uirevtxtsize(DIG *G,float h,float w,float g,float hx,float wy,float spy);
void uirev_file(FILE * pf,DIG *G,float sx,float fx,float sy, float fy);
void uiwin_circlefill(DIG *G);
void ui_circle(DIG *G,float x,float y,float r);
int uiDataToArea(DIALOG *D,unsigned long *data,int xl,int yl,int w,int h) ;
void  uia4copy(DIG *G);
void  uilscopy(DIG *G);
void uiFreeMemAlloc(DIALOG *D);
unsigned long *uiGetPixelData(char *flname,int xsize,int ysize,unsigned long bkcolor);
int uiAddDataToArea(DIALOG *D,unsigned long *data,int xl,int yl,int w,int h);
int uiCheckClickinDialog(DIALOG *D);
int kgSetCleantmpdir(char *tmpdir);
void ui_clip_const(DIG *G,float cpmin,float cpmax);
void ui_near_clip(DIG *G,float cp);
void ui_far_clip(DIG *G,float cp);
void ui_3_move(DIG *G,float x,float y,float z) ;
void ui_3_draw(DIG *G,float ix,float iy,float iz);
void ui_3_panel(DIG *G,float *x,float *y,float *z,int color,int flag,int n);
void ui_3_box_fill(DIG *G,float x1,float y1,float z1,float x2,float y2,float z2,int color,int ib);
void ui_3_godr_fill(DIG *G,int n,float *x,float *y,float *z,float *p);
void ui_3_shade_fill(DIG *G,int n,float *x,float *y,float *z,float *p,int clr);
void uiput_pix3(DIG *G,int col,int row,int z);
void uiput_shade_pix3_rgb(DIG *G,int col,int row,int z,float illu);
void uiput_shade_pix3(DIG *G,int col,int row,int z,float illu);
void _uimove3(DIG *G,int xp, int yp,int zp);
void _uidraw_line3(DIG *G,int x1,int y1,int z1,int x2,int y2,int z2);
void uidraw_line3(DIG *G,int xa,int ya,int za,int xb,int yb,int zb);
void uihori_line3(DIG *G,int xa,int xb,int y,int za,int zb);
void uipoly_hori_line3(DIG *G,int xa,int xb,int y,float za,float zb);
void _uidraw3_(DIG *G,int x, int y, int z);
void _uidraw3(DIG *G,int x, int y, int z);
void _uibox_fill3(DIG *G,int x1,int y1,int z1,int x2,int y2,int z2, unsigned int color);
void _uipoly_fill3(DIG *G,short n,int *px,int *py,float *pz,short flag,unsigned int b_color);
void uigodr_line3(DIG *G,int xa,int xb,int y,int za,int zb,float pa,float pb);
void _uishade_fill3(DIG *G,short n,int *px,int *py,int *pz ,short flag,float *pv);
void uishade_line3(DIG *G,int xa,int xb,int y,int za,int zb,float pa,float pb);
void _uigodard_fill3(DIG *G,short n,int *px,int *py,int *pz ,short flag,float *pv);
void uiwin_3_shade_o(DIG *G);
void uiwin_3_shade(DIG *G);
float * kgcomputeV(DIG *G,int no,float *x,float *y,float *z);
void uiclear_zbuf(DIG *G);
void ui_set_zbuf(DIG *G);
void ui_release_buf(DIG *G);
float * kgcomputeV(DIG *G,int no,float *x,float *y,float *z);
void kgtransfrm(kgDC *dc,float xp, float yp, float zp);
void kgtranslate(kgDC *dc,float tx, float ty, float tz);
void kgrotatx(kgDC *dc,float ang);
void kgrotaty(kgDC *dc,float ang);
void kgrotatz(kgDC *dc,float ang);
void kgrotate(kgDC *dc,unsigned char ch, float ang);
void kgprojection(kgDC *dc,str1 oldstr);
void uicnv_file(DIG *G,FILE *pf);
void uigetcurrgb(kgWC *wc,int *r,int *g,int *b);
void get_scan_code(Display *Dsp);
void uiMakeImageTransparent(XImage *ximage,float transparency);
void uiScrn_recover(kgWC *wc);
void * ui_set_graphics(int xpos,int ypos,int xres,int yres,char *title,int dec,float transparency);
void * ui_set_graphics_sticky(int xpos,int ypos,int xres,int yres,char *title,int dec,float transparency,int sticky,int fixpos,int NoTaskBar,int StackPos,void *Shapexpm);
void  *ui_create_window(int xpos,int ypos,int xres,int yres,char *title,int dec,float transparency,int sticky,int fixpos,int NoTaskBar,int StackPos,void *Shapexpm) ;

int _ui_updatetextbox (void *tmp);
int _ui_readtextbox(void *tmp);
void _ui_updatemenu(void *tmp,int item,char **menu); // if menu is NULL it will not be used 
void ui_updatemenu(void *tmp,int item,char **menu); 
char **t_fontnames(void);
void * _uiGetFileImage(char *flname);
void uiFreeImgBuffer(void);
char * ui_mktmpdir(void);
void uiDraw_XString(DIALOG *D,int x,int y,char *str,int gap);
void uiBoxedString(DIALOG *D,char *str,int x,int y,int width,int height,int font,int border,int highli,int color,int FontSize,int justfic,float rfac,int state);
void uiFilledString(DIALOG *D,char *str,int x,int y,int width,int height,int font,int fillcolor,int highli,int color,int FontSize,int justfic,float rfac,int state,float depthfac);
void uiShadedString(DIALOG *D,char *str,int x,int y,int width,int height,int font,int fillcolor,int highli,int color,int FontSize,int justfic,float rfac,int state,int type);
int gphchng_hsv_clr (int fid,int clr,float h,float s,float v);
void _uiDrawPressedNewButn(BUTS *bt,int k);
void ui_draw_browser(DIW *w,int n,int lngth);
char ** _uiFolderMenu(char *d_name);
char ** _uiFileMenu(char *dir,char *filter);
int _ui_setattrib(void *parent,int xo,int yo,  void *v0, void *v1, void *v2, void *v3, 
 void *v4, void *v5, void *v6, void *v7, void *v14 );
int  uiset_atribs(DIG *G);
 void uidrarrow(DIG *G,float x1,float y1, float x2,float y2,float fac);
void uiborder(DIG *G,float x1,float y1,float x2,float y2,int wd,int clr);
void _ui_drawtablecursor (TX_STR *tx);
void _ui_cleantablecursor (TX_STR *tx);
int _ui_processtableboxpress(TX_STR *t,KBEVENT kbe);
int MousePressInTableBox(TX_STR *tptr,KBEVENT kbevent);
int kgGetCirclePoints(float xl,float yl,float fac,float *x,float *y,float *v,float vmin,float vmax,int count);
void _uiDrawNewBrowser (DIALOG* D,int item);
void _uiDrawNewMenuItem (DIALOG* D,int item);
int Make_Newmenu(DIALOG *D,DIX *x,int x1,int y1);
void * make_dialog_newmenu_str(DIALOG *D,DIX *x,int pos,int df,char **menu,int size);
void _uiDrawDialogNewMenu(DIX *x);
void _uiPutNewmenu( DIX *x);
void _uiPutYmenu( DIY *y);
void _uiPutXmenu( DIX *y);
void _uiPutEmenu( DIE *y);
void _uiPutMmenu( DIS *y);
void _uiPutWmenu( DIW *y);
void _uiPutRadioButton( DIRA *y);
void _uiPutCheckBox( DICH *y);
void uiMenuString(DIALOG *D,char *Str,int x,int y,int width,int height,int font,int color,int FontSize,int status);
void _uiNewMoveVertPointer(BRW_STR *br);
void ui_doublebuffer(DIG *G);
void ui_singlebuffer(DIG *G);
void ui_swapbuffers_old(DIG *G);
void ui_swapbuffers(DIG *G);
 void img_move(DIG *G,float x,float y);
 void img_draw(DIG *G,float x, float y);
 void img_drawimage(DIG *G,void *img,float x1,float y1,float x2,float y2);
 void img_marker(DIG *G,float x,float y);
 void img_DRAW_LINE(DIG *G,float x1,float y1,float x2,float y2);
 void img_drawline(DIG *G,float x1,float y1,float x2,float y2);
 void img_boxfill(DIG *G,float x1,float y1,float x2,float y2,int color);
 void img_circle(DIG *G,float x1,float y1,float r);
 void img_circlefill(DIG *G,float x1,float y1,float r,int color);
 void img_poly_fill(DIG *G,int n,float *x,float *y,int flag,int color);
 void img_viewport(DIG *G,float x1,float y1,float x2,float y2);
 void img_userframe(DIG *G,float x1,float y1,float x2,float y2);
 void img_userframe3d(DIG *G,float x1,float y1,float x2,float y2,float xe,float ye,float ze,float zc,float clmin,float clmax) ;
 void img_move3f(DIG *G,float x,float y,float z);
 void img_draw3f(DIG *G,float x,float y,float z);
 void img_polyfill3f(DIG *G,int n,float *x,float *y,float *z,int flag,int color);
 void img_boxfill3f(DIG *G,float x1,float y1,float z1,float x2,float y2,float z2,int ib,int color);
 void img_godrfill3f(DIG *G,int n,float *x,float *y,float *z,float *v);
 void img_set_markstyle(DIG *G,int style);
 void img_set_color(DIG *G,int color);
 void img_set_lnstyle(DIG *G,int style);
 void img_set_angle(DIG *G,float t);
 void img_txt_size(DIG *G,float ht,float wt,float sp);
 void img_txt_color(DIG *G, int color);
 void img_txt_fill(DIG *G, int color);
 void img_txt_slant(DIG *G, float slant);
 void img_txt_bodr(DIG *G, int color);
 void img_txt_bkgr(DIG *G, int color);
 void img_txt_pattern(DIG *G, int color);
 void img_txt_font(DIG *G, int font);
 void  img_txtwrt(DIG *G,char *txt);
 void img_set_lnwidth(DIG *G,int width);
 void img_set_txtbold(DIG *G,int bold);
 void img_godard_fill(DIG *G,int n,float *x,float *y,float *p);
  void img_set_godard_clrs(DIG *G,float max,float min,int ib,int startclr,int nclrs);
  void img_set_shade_clrs(DIG *G,float max,float min,int ib,int startclr,int nclrs);
 void img_set_prtxt(DIG *G,int txt );
 void  img_sup_clip_limit(DIG *G,float x1,float y1,float x2,float y2);
 void  img_clip_limit(DIG *G,float x1,float y1,float x2,float y2);
 void img_chng_clr(DIG *G,int no,int ir,int ig,int ib);
void uiCopyResizedImage(DIG *G);
int  uistrlngth(void *G,char *title,float *xdsp);
int _ui_process_z_key(DIZ *y,KBEVENT kbe);
int _ui_process_z_click(DIZ *y,KBEVENT kbe);
int _ui_process_z_move (DIZ *y,KBEVENT kbe);
int _ui_process_v_key(DIV *y,KBEVENT kbe);
int _ui_process_v_click(DIV *y,KBEVENT kbe);
int _ui_process_v_move (DIV *y,KBEVENT kbe);
int _ui_process_y_key(DIY *y,KBEVENT kbe);
int _ui_process_y_click(DIY *y,KBEVENT kbe);
int _ui_process_y_move (DIY *y,KBEVENT kbe);
int _ui_process_r_key(DIRA *y,KBEVENT kbe);
int _ui_process_r_click(DIRA *y,KBEVENT kbe);
int _ui_process_r_move (DIRA *y,KBEVENT kbe);
int _ui_process_c_key(DICH *y,KBEVENT kbe);
int _ui_process_c_click(DICH *y,KBEVENT kbe);
int _ui_process_c_move (DICH *y,KBEVENT kbe);
int _ui_process_x_key(DIX *y,KBEVENT kbe);
int _ui_process_x_click(DIX *y,KBEVENT kbe);
int _ui_process_x_move (DIX *y,KBEVENT kbe);
int _ui_process_e_key(DIE *y,KBEVENT kbe);
int _ui_process_e_click(DIE *y,KBEVENT kbe);
int _ui_process_e_move (DIE *y,KBEVENT kbe);
void _uiDrawZ (DIALOG* D,int item);
void _uiDrawV (DIALOG* D,int item);
void _uiDrawY (DIALOG* D,int item);
void _uiDrawX (DIALOG* D,int item);
void _uiDrawO (DIALOG* D,int item);
void _uiDrawE (DIALOG* D,int item);
void _uiDrawP (DIALOG* D,int item);
void _uiDrawB (DIALOG* D,int item);
void _uiDrawN (DIALOG* D,int item);
int _uiMake_V(DIV *v);
int _uiMake_Z(DIZ *v);
int _uiMake_G(DIG *g);
int _uiMake_Tx(DIT *t);
int _uiMake_Ta(DIT *t);
int _uiMake_M(DIM *m);
int _uiMake_B(DIBN *b);
int _uiMake_N(void *tmp);
int _uiMake_H(DILN *b);
int _uiMake_SF(DIF *f);
int _uiMake_SD(DID *f);
int _uiMake_SH(DIHB *f);
int _uiMake_W(DIW *w);
int _uiMake_Wbwsr(DIW *y);
int _uiMake_MS(DIS *w);
int _uiMake_P (DIP *p);
int _uiMake_I(DII *I);
int _uiMake_O(DIO *o);
int _uiMake_Y(DIY *y);
int _uiMake_X(DIX *y);
int _uiMake_E(DIE *y);
int _uiMake_RadioButton(DIRA *y);
int _uiMake_CheckBox(DICH *y);
void _uiDrawRadioButton (DIALOG* D,int item);
void _uiDrawCheckBox (DIALOG* D,int item);
int _uiMake_RadioButton(DIRA *r);
int _uiMake_CheckBox(DICH *c);
void _uiDrawDialogX(DIX *x);
void _uiDrawDialogV(DIV *x);
void _uiDrawDialogZ(DIZ *x);
void _uiDrawDialogRadioButton(DIRA *y);
void _uiDrawDialogCheckBox(DICH *y);
int _ui_processhslidedrag(DIHB *B,KBEVENT kbe);
int _ui_processhslidepress(DIHB *B,KBEVENT kbe);
int _ui_processhslidekey(DIHB *B,KBEVENT kbe);
void * make_dialog_y_str(DIALOG *D,DIY *y,int pos,int df,char **menu,int size);
void _uiDrawDialogY(DIY *y);
void _uiDrawDialogE(DIE *y);
void _uiDrawDialogM(DIS *y);
void _uiMakeButs(DIN *B);
void _uiUpdateType0Buts(DIN *B);
void * Loadfontstruct(void);
void _uiMoveWVertPointer(void *tmp);
void _uiMoveEVertPointer(void *tmp);
void _ui_vert_scroll_ebar(void *tmp);
void _ui_vert_scroll_mbar(void *tmp);
void _uiMoveMVertPointer(void *tmp);
void _uiMoveYVertPointer(void *tmp);
void _uiMoveVVertPointer(void *tmp);
void _uiMoveZVertPointer(void *tmp);
void _ui_vert_scroll_ybar(void *tmp);
void _dvrect_fill(kgWC *wc,int x1,int y1,int x2,int y2,unsigned int color);
void _dvbordertype0(DIALOG *D,int xmin,int ymin, int xmax,int ymax,int bright);
void _dvbordertype1(DIALOG *D,int xmin,int ymin, int xmax,int ymax);
void _dvbordertype2(DIALOG *D,int xmin,int ymin, int xmax,int ymax, int tw,int lw,int rw,int bw);
void _dvbordertype3(DIALOG *D,int xmin,int ymin, int xmax,int ymax);
void _dvbordertype4(DIALOG *D,int xmin,int ymin, int xmax,int ymax);
void _dv_v_line(kgWC *wc,int ya,int yb,int x);
void _dv_h_line(kgWC *wc,int xa,int xb,int y);
void _dvLine(kgWC *wc, int x1,int y1,int x2,int y2);
void _dvBox_Fill(kgWC *wc,int xmin,int ymin,int xmax,int ymax);
void _dvBox_Fill_Transparent(kgWC *wc,int xmin,int ymin,int xmax,int ymax,float transparency);
 void _dvup_dir(DIALOG *D,int x,int y,int w,float rfac,int type);
 void _dvdown_dir(DIALOG *D,int x,int y,int w,float rfac,int type);
 void _dvmove_vert_pointer(DIALOG *D,int x,int y,int w,int h,int sy,int sh);
void _dv_draw_bound(DIALOG *D,int x1,int y1,int x2,int y2,int c_bound);
void _uiSetSwitch(void *tmp);
void _uiWriteStrings(DIG *fid,float x0,float y0,float xl,float yl,char *buf,float wd,float ht,int justf);
char * _uiGetFileImageName(DIALOG *D,char *flname);
void uimake_telmt(T_ELMT *elmt);
void dvdraw_depre(DIALOG *Dtmp,int x1,int y1,int x2,int y2);
void dvdraw_protru(DIALOG *Dtmp,int x1,int y1,int x2,int y2);
void kgPutBackEvent(void *tmp,XEvent *event);
void kgIgnoreResize(void *tmp);
void kgCatchResize(void *tmp);
void uiChangeImageTransparency(XImage *ximage,float transparency);
void kgSubWindow(void *Gtmp);
void  *kgCreateWindow (void *Tmp);
void  *kgCreateSubWindow (void *Tmp);
void * kgSetupGraphics(void *Tmp);
void wprintf(DIALOG *D, char *s);
void set_gui_colours(Gclr Gc);
Gclr get_gui_colours(void);
void Read_Gclr(Gclr *gc,char *app);
void Write_Gclr(Gclr gc,char *app);
void Application_Gclr(char *app);
int Fixshadecolors_hsv(int file);

float  Dgetfloat(void *Tmp,int tb,int item) ;
float  Dsetfloat(void *Tmp,int tb,int item,float val) ;
double Dgetdouble(void *Tmp,int tb,int item) ;
double Dsetdouble(void *Tmp,int tb,int item,double val);
int    Dgetint(void *Tmp,int tb,int item) ;
int    Dsetint(void *Tmp,int tb,int item,int val) ;
long   Dgetlong(void *Tmp,int tb,int item) ;
long   Dsetlong(void *Tmp,int tb,int item,long val) ;
char * Dgetstring(void *Tmp,int tb,int item) ;
char * Dsetstring(void *Tmp,int tb,int item,char * val) ;

int    Dprintf(void *Tmp, int infob,char *str) ;
char   **Dgetmenu(void *Tmp,int wid);
void Dsetmenu(void *Tmp,int wid,char **list);
void Dsetpixmap(void *Tmp,int wid,void *img);
void Dfreepixmap(void *Tmp,int wid);
int  Dgetmenuitem(void *Tmp,int wid);
int  Dsetmenuitem(void *Tmp,int wid,int df);
char **Dgetmsgscroll(void *Tmp,int wid);
void Dsetmsgscroll(void *Tmp,int wid,char **list);
char **Dgetscrollmenu(void *Tmp,int wid);
void Dsetscrollmenu(void *Tmp,int wid,char **list);
/* JPEG related */
void   *ReadJpegFile(char * jpgfile);
void   *ReadPngImage(char * pngfile);
void   SetSharedPicDir(char *dirname);
char * Dgetmenustring(void *Tmp,int wid);
int    uiUpdateTextBox(void *tmp,int no);
int GetDisplaySize(int *xres,int *yres);
 void uiMakeHcopy(char *flname);
 void  uiBackupGph(void *Tmp,int gindex,char *flname);
 void uiPrintf(DIALOG *D,int xp,int yp, char *s);
 int uiPrintFile(void *parent,char *flname) ;
 void *GetImageStruct(void *tmp);
void *uiWriteJpg(char *jpgfile);
void *uiWritePng(char *pngfile);
void uiFreeImage(void *tmp);
void uiUpdatemenu(void *tmp,int wid);
int uiShowFile( File *fp,char *butns[]);
void ui_cleandir(char *folder);
void *uiGetImage(char *flname);
void *uiResizeImage(PNGIMG *png,float fac);
void uiWriteImage(void *img,char *flname);
void *uiGetgmImage(char *flname);
void *uiResizegmImage(GMIMG *png,float fac);
void *uiScalegmImage(GMIMG *png,float fac);
void uiWritegmImage(GMIMG *png,char *flname);
void *uiPixelsgmImage(GMIMG *png);
//void uiHideCursor();
void uiSetHslide(void *tmp,int i,int val);
int uiGetHslide(void *tmp,int i);
void uiSetDslide(void *tmp,int i,int val);
int uiGetDslide(void *tmp,int i);
void uiFreeGmImage(void *png);
void *uiCropgmImage(GMIMG *png,int xl,int yl,int xu,int yu);
void *uiRotategmImage(GMIMG *png,float angle) ;
void *uiAppendgmImage(GMIMG *png1,GMIMG *png2);
void uiFreeFmgImage(void *png);
int uiGoBackGround(void);
int uiFmgToFile(unsigned char *array,int sz,char * flname);
int uiExtractBaseName (char *flname,char *basename) ;
int uiWriteFmg(char *infile);
void *uiCreategmImage(unsigned long *data,unsigned long xsize,unsigned long ysize);
void *uiCreateCleangmImage(unsigned long xsize,unsigned long ysize,int bkred,int bkgreen,int bkblue,int opacity);
void *uiChangeSizegmImage(GMIMG *png,unsigned long w,unsigned long h,int Fltr);
void *uiThumbnailgmImage(GMIMG *png,unsigned long w,unsigned long h);
void *uiHalfSizegmImage(GMIMG *png);
void *uiCopyPixelsgmImage(void * img,unsigned long *data);
void *uiShadegmImage(GMIMG *png);
void *uiReduceNoisegmImage(GMIMG *png);
void *uiBlurgmImage(GMIMG *png);
void *uiEmbossgmImage(GMIMG *png);
void *uiSharpengmImage(GMIMG *png);
void *uiSpreadgmImage(GMIMG *png);
void *uiEnhancegmImage(GMIMG *png);
void *uiShadowgmImage_o(GMIMG *png,int xoffset,int yoffset);
void *uiShadowgmImage(GMIMG *png,int xoffset,int yoffset,GMIMG *shimg);
void *uiMergegmImages(GMIMG *png1,GMIMG *png2,int Xshft,int Yshft); /* second on first */
void *uiCopygmImage(GMIMG *png);
void *uiCleangmImage(GMIMG *png);
void *uiFlipgmImage(GMIMG *png); /* Horizontal */
void *uiFlopgmImage(GMIMG *png); /* Vertical */
void *uiRotateAboutgmImage(GMIMG *png,float angle,int xo,int yo); // Creates new rotated image
unsigned long *uiGetAntialiasedData(char *gphfile,int xsize,int ysize);
void  uiAntialiasedReview(void *parent,int gbox);
void PointerAntialiasedZoom(void*parent,int gbox);
void *uiGphtogmImage(char *flname,int xsize,int ysize,unsigned long bkcolor);
void ui_updatemenu(void *tmp,int wid,char **m);
int kgUi(DIALOG *D);
void kgInitUi(void *Tmp);
void kgCleanUi(void *tmp);
void kgCloseUi(DIALOG *D);
int kgOpenGrp(void *Tmp);
int kgUpdateGrp(void *Tmp,int grpid);
int kgMoveGrp(void *Tmp,int grpid,int x1,int y1);
int kgResizeGrp(void *Tmp,int grpid,int xl,int yl);
int kgMoveWidget(void *Tmp,int item,int x1,int y1);
int kgResizeWidget(void *Tmp,int item,int xl,int yl);
void kgImage(void *Dtmp,void *tmp,int x0,int y0,int width,int height,float transparency,float highfac);
DIALOG *getParentDisplay(void *D);
DIG *uigetGbox(void *Tmp,int gbox);
void kgReview(DIG *G);
void kgAntialiasedReview(DIG *G);
void kgViewport(DIG *G,float x1, float y1, float x2, float y2);
void kgUserFrame(DIG *G,float x1,float y1, float x2, float y2);
void kgGetViewport(DIG *G,float *x1,float *y1,float *x2,float *y2);
void kgGetWindow(DIG *G,float *x1,float *y1,float *x2,float *y2);
void kgLineColor(DIG *G,int colr);
void kgClearView(DIG *G);
void kgClearBuffer(DIG *G);
void kgMove2f(DIG *G,float x,float y);
void kgMarkerType(DIG *G,int mtype);
void kgDraw2f(DIG *G,float x,float y);
void kgMarker2f(DIG *G,float x,float y);
void kgDefaultGuiTheme(Gclr *Gc);
void kgGrayGuiTheme(Gclr *Gc);
int  kgCheckEscape(DIALOG *D);
void kgSetGouraudParams(DIG *G,float p2, float p1, int n, int ib);
void kgGouraudFill(DIG *G,int n, float *x, float *y,float *v);
void kgWriteText( DIG *G,char *c);
void kgTextAngle(DIG *G,float ang);
void kgTextSize(DIG *G,float h,float w,float g);
void kgTextFont(DIG *G,int tf);
void kgTextColor(DIG *G,int tcolr);
void kgLineStyle(DIG *G,int style);
void kgLineWidth( DIG *G,int dw);
void kgPolyFill(DIG *G,int n, float *x, float *y, int flag,int color);
void kgBoxFill(DIG *G,float x1,float y1, float x2, float y2,int fl,int ib);
void kgArrowSize(DIG *G,int size);
void kgChangeColor(DIG *G,int no,int ir,int ig,int ib);
void kgSetClip(DIG *G,float x1,float y1,float x2,float y2);
void kgPopClip(DIG *G);
void kgDrawImage(DIG *G,void *imgfile,float x1,float y1,float x2, float y2);
void kgImportGphFile(DIG *G,char *flname,float gx1,float gy1,float gx2,float gy2);
void kgSetShadeParams(DIG *G,float p2, float p1,int startclr, int n, int ib);
void kgCircle2f(DIG *G,float x,float y,float r);
void kgPointerZoom(DIG *G);
void kgPointerAntialiasedZoom(DIG *G);
void kgBackupGph(DIG *G,char *flname);
void kgHardCopy(DIG *G,char *flname);
void kgLandscapeCopy(DIG *G,char *flname);
void kgOpenObject(DIG *G,int obj);
void kgCloseObject(DIG *G);
void kgExtObject(DIG *G,int obj);
void kgCallObject(DIG *G,int obj,float sx,float sy,float fx,float fy);
void kgCopyObject(DIG *G,int obj);
void kgUpdateOn(void *D);
void kgUpdateOff(void *D);
void kgRaiseWindow(void *D);
void kgLowerWindow(void *D);
void kgMoveWindow(void *tmp,int x,int y);
void kgResizeWindow(void *tmp,int l,int w);
void kgSync(void *Tmp);
void kgCleanBackground(void *D,int xo,int yo,int width,int height,float transparency) ;
int  kgCheckPngFile(char *file);
void gphChangeColor(int fid,int no,int ir,int ig,int ib);
void gphTextFont(int fid,int tf);
void gphTextColor(int fid,int tcolr) ;
void gphTextSize(int fid,float h,float w,float g,float w_x1,float w_y1,float w_x2,float w_y2);
void gphWriteText( int fid,char *c);
void gphUserFrame(int fid,float x1,float y1, float x2, float y2);
void gphMove2f(int fid,float x,float y);
void gphDraw2f(int fid,float x,float y);
void gphLineColor(int fid,int colr);
void gphLineWidth( int fid,int dw);
void gphLineStyle(int fid,int style);
void gphTextAngle(int fid,float ang);
void gphCircle2f(int fid,float x,float y,float r);
void gphBoxFill(int fid,float x1,float y1, float x2, float y2,int fl,int ib);
void gphPolyFill(int fid,int n, float *x, float *y, int flag,int color);
int gphRoundedRectangleRing2(int fid,float xo,float yo,float xl,float yl,float red,float green,float blue,float fac,float bordrsize) ;
int gphRoundedRectangleRing3(int fid,float xo,float yo,float xl,float yl,float red,float green,float blue,float fac,float bordrsize) ;
int gphRoundedRectangleRing1(int fid,float xo,float yo,float xl,float yl,float red,float green,float blue,float fac,float bordrsize) ;
int gphRoundedRectangleRing(int fid,float xo,float yo,float xl,float yl,float red,float green,float blue,float fac,float bordrsize) ;
int gphRoundedRectangleFill(int fid,float xo,float yo,float xl,float yl,int ib,int clr,float fac);
int gphRoundedRectangleShade(int fid,float xo,float yo,float xl,float yl,int clr,float fac,float vmin,float vmax);
int gphRoundedRectangleShade0(int fid,float xo,float yo,float xl,float yl,int clr,float fac,float vmin,float vmax);
int gphRoundedRectangleShade1(int fid,float xo,float yo,float xl,float yl,int clr,float fac,float vmin,float vmax);
int gphRoundedRectangleShade4(int fid,float xo,float yo,float xl,float yl,int clr,float fac,float vmin,float vmax);
int gphRoundedRectangle(int fid,float xo,float yo,float xl,float yl,int clr,float fac,float bsize);
int gphArcFill(int fid,float xo,float yo,float r,float ang1,float ang2,int flag,int color);
int gphStringLength(char *str,float *lngth,int font,float width,float gap);

int kgRoundedRectangleRing2(void * fid,float xo,float yo,float xl,float yl,float red,float green,float blue,float fac,float bordrsize) ;
int kgRoundedRectangleRing3(void * fid,float xo,float yo,float xl,float yl,float red,float green,float blue,float fac,float bordrsize) ;
int kgRoundedRectangleRing1(void * fid,float xo,float yo,float xl,float yl,float red,float green,float blue,float fac,float bordrsize) ;
int kgRoundedRectangleRing(void * fid,float xo,float yo,float xl,float yl,float red,float green,float blue,float fac,float bordrsize) ;
int kgRoundedRectangleFill(void * fid,float xo,float yo,float xl,float yl,int ib,int clr,float fac);
int kgRoundedRectangleShade(void * fid,float xo,float yo,float xl,float yl,int clr,float fac,float vmin,float vmax);
int kgRoundedRectangleShade0(void * fid,float xo,float yo,float xl,float yl,int clr,float fac,float vmin,float vmax);
int kgRoundedRectangleShade1(void * fid,float xo,float yo,float xl,float yl,int clr,float fac,float vmin,float vmax);
int kgRoundedRectangleShade4(void * fid,float xo,float yo,float xl,float yl,int clr,float fac,float vmin,float vmax);
int kgRoundedRectangle(void * fid,float xo,float yo,float xl,float yl,int clr,float fac,float bsize);
int kgArcFill(void * fid,float xo,float yo,float r,float ang1,float ang2,int flag,int color);

void kgDisplayGphFile(DIALOG *D,char *flname,int xo,int yo,int xl,int yl,unsigned long bkcolor);
int  kgCheckButtonPress(void *D);
int kgSplashDia( int xo,int yo,int xl,int yl,char  *xpm ,char *message,int font,int fontcolor,unsigned long bkcolor);
void *RunkgSplashDia(void *arg);
void kgWaitButtonRelease(DIALOG *D);
int  kgWait(int secs); // for threads to wait
void kgThreadSleep(int secs,int usecs);
int kgThreadWaitPipe(int pipe,int secs,int usecs);
void kgUserFrame3D(DIG *G,float x_min,float y_min,float z_min,float x_max,float y_max,float z_max);
void kgRotate(DIG *G,unsigned char ch, float ang);
void kgTranslate(DIG *G,float tx, float ty, float tz);
void kgMove3f(DIG *G,float x, float y, float z);
void kgDraw3f(DIG *G,float x, float y, float z);
void kgPolyFill3f(DIG *G,int n, float *x, float *y, float *z, int flag, int color);
void kgBoxFill3f(DIG *G,float x1,float y1, float z1, float x2, float y2,float z2, int fl,int ib);
void kgGouraudFill3f(DIG *G,int n,float *x,float *y,float *z,float *v);
void kgShade3f(DIG *G,int n,float *x,float *y,float *z);
void kgColorShade3f(DIG *G,int n,float *x,float *y,float *z,int baseclr);
void kgSetZbuffer(DIG *G,int val);
void kgSetNearClip(DIG *G,int val);
void kgSetFarClip(DIG *G,int val);
int kgAddLight(DIG *G,float x,float y,float z);
int kgClearLights(DIG *G);
int kgSetShading(DIG *G,int startclr,int ncolors,int bodr,int basecolor);
int kgSetHSVShading(DIG *G,int startclr,int ncolors,int bodr,float hue,float satu);
void kgChangeCursor(DIALOG *D,int n);
int kgChangeCurFormat(DIG *G,char *xfmt,char *yfmt);
void kgSkipEvents(DIALOG *D);
void kgSkipButtonRelease(DIALOG *D);
KBEVENT  kgSkipMouseMove(DIALOG *D);
int  kgCheckMousePressEvent(DIALOG *D,KBEVENT *kbe);
int  kgCheckEvent(DIALOG *D,KBEVENT *kbe);
KBEVENT kgGetEvent(DIALOG *D);
void uiTruncateString(char **m,int size);
void uiRestoreString(char *m,int size);
void uiResetString(char *m,int size);
char **kgFileMenu( char *dir,char *filter);
char ** kgFolderMenu(char *d_name);
void  kgDrawingTool(DIG *G);
int  kgCheckMenu(void *parent,int x,int y,char *qst,int df);
int  kgWarnMenu(void *parent,int x,int y,char *qst,int df);
int  kgQstMenu(void *parent,int x,int y,char *qry,int df);
void kgHideCursor(DIALOG *D);
int ui_Pageup(int ch) ;
int ui_Pagedown(int ch) ;
int ui_End(int ch) ;
int ui_Home(int ch) ;
int ui_Uparrow(int ch) ;
int ui_Downarrow(int ch) ;
int ui_Leftarrow(int ch) ;
int ui_Rightarrow(int ch) ;
int ui_Tab(int ch) ;
int ui_Backspace(int ch) ;
int ui_Linefeed(int ch) ;
int ui_Return(int ch) ;
int ui_Escape(int ch) ;
int ui_Clear(int ch) ;
int ui_Delete(int ch) ;
void kgCleanDir(char *folder);
int kgFolderBrowser( void *parent,int x0,int y0,char *flname,char *fltr);
int kgFileBrowser(void *parent,int x0,int y0,  char *v0, char *v1 );
int kgCheckTrueColor(void);
char *kgWhich(char *pgr);
void kgSwapBuffers(DIG *G) ;
void kgDoubleBuffer(DIG *G); 
void kgSingleBuffer(DIG *G) ;
void kgWindowStateAbove(void *Tmp);
void kgWindowStateBelow(void *Tmp);
void kgGphtoImagefile(char *Imagefile,char *gphfile,int xsize,int ysize,unsigned long bkcolor) ;
void *kgGphtoImage(char *gphfile,int xsize,int ysize,unsigned long bkcolor) ;
char *kgMakeTmpDir(void);
void * gphStringToImage(char *Str,int xsize,int ysize,int font,int txtcolor,int justification,int charwidth,int bkcolor);
void  gphStringToImagefile(char *Imgfile,char *Str,int xsize,int ysize,int font,int txtcolor,int justification,int charwidth);
void * gphFilledStringToImage(char *Str,int xsize,int ysize,int font,int fillcolor,int highli,int color,int justification,int width,float rfac,int state);
void * gphFilledStringToImage1(char *Str,int xsize,int ysize,int font,int fillcolor,int highli,int color,int bodrclr,int justification,int width,float rfac,int state);
void * gphFilledStringToImage2(char *Str,int xsize,int ysize,int font,int fillcolor,int highli,int color,int bodrclr,int justification,int width,float rfac,int state);
void * gphBoxedStringToImage(char *Str,int xsize,int ysize,int font,int border,int highli,int color,int justification,int width,float rfac,int state);
void * gphShadedStringToImage(char *Str,int xsize,int ysize,int font,int fillcolor,int highli,int color,int justification,int width,float rfac,int state,int type);
void * kgStringToImage(char *Str,void *image,int xsize,int ysize,int font,int txtcolor,int justification,int charwidth,int bkcolor);
void  kgStringToImagefile(char *Imgfile,char *Str,int xsize,int ysize,int font,int txtcolor,int justification,int charwidth);
void * kgFilledStringToImage(char *Str,void *image,int xsize,int ysize,int font,int fillcolor,int highli,int color,int justification,int width,float rfac,int state);
void * kgFilledStringToImage1(char *Str,void *image,int xsize,int ysize,int font,int fillcolor,int highli,int color,int bodrclr,int justification,int width,float rfac,int state,float depthfac);
void * kgFilledStringToImage2(char *Str,void *image,int xsize,int ysize,int font,int fillcolor,int highli,int color,int bodrclr,int justification,int width,float rfac,int state);
void * kgFilledStringToImage3(char *Str,void *image,int xsize,int ysize,int font,int fillcolor,int highli,int color,int bodr,int justification,int width,float rfac,int state,float depthfac);
void * kgBoxedStringToImage(char *Str,void *image,int xsize,int ysize,int font,int border,int highli,int color,int justification,int width,float rfac,int state);
void * kgShadedStringToImage(char *Str,void *image,int xsize,int ysize,int font,int fillcolor,int highli,int color,int justification,int width,float rfac,int state,int type);
float  kgStringLength(void *G,char *title);
float  uiStringLength(char *title,int width);
void uiString(DIALOG *D,char *str,int x,int y,int width,int height,int font,int color,int FontSize,int justfic,int bkcolor);
char **kgFontNames(void);
void kgFreeFontNames(char **pt);
int kgGetFont(void *parent,int xo,int yo);
int kgGetColor(void *parent,int xo,int yo,int *r,int *g,int *b);
void kgGetDefaultRGB(int color,int *r,int *g,int *b);
int gphmixshadecolors_hsv(int fid,int sclr,int nclrs,float h,float s,float v); 
int gphSetHSVShading(int fid,int startclr,int ncolors,int bodr,float hue,float satu);
int RGBtoHSV(float r,float g,float b,float *h,float *s,float *v);
int HSVtoRGB(float *r,float *g,float *b,float h,float s,float v);
int gphMixHsvColors(int fid,int sclr,int nclrs,float h,float s,float vmin,float vmax) ;
int kgMixHsvColors(void * fid,int sclr,int nclrs,float h,float s,float vmin,float vmax) ;
void gphSetShadeParams(int fid,float p2, float p1,int startclr, int n, int ib);
void gphGouraudFill(int fid,int n, float *x, float *y,float *v);
void kgPushBackEvent(DIALOG *D);
void kgCheckAndRemoveParent(char *dir);
void kgColorTheme(DIALOG *D,unsigned char red,unsigned char green, unsigned char blue);
void kgDefineColor(int clr,unsigned char red,unsigned char green,unsigned char blue);
int Dsplash(void *Tmp,int item,char *msg);
int kgGetRootPos( int *xp,int *yp);
int kgGetRootRect( int *x1,int *y1,int *x2,int *y2) ;
void kgResetColor(void *D,int no,int ir,int ig,int ib); // redefines a color; but will not affect hardcopy
void *kgGphtoAntialiasedImage(char *gphfile,int xsize,int ysize,unsigned long bkcolor ,int Mag);
          // Same as kgGphtoImage; but can specify the Mag factor
void * gphSplashStringToImage(char *Str,int xsize,int ysize,int font,int fillcolor,int color,int bodrcolor,int justification,int width,float rfac);
void * kgSplashStringToImage(char *Str,int xsize,int ysize,int font,int fillcolor,int color,int bodrcolor,int justification,int width,float rfac);
void uiSplashString(DIALOG *D,char *str,int x,int y,int width,int height,int font,int fillcolor,int color,int FontSize,int justfic,float rfac);
int gphRoundedRectanglePressed(int fid,float xo,float yo,float xl,float yl,int clr,float fac,float bodrsize);
int gphRoundedRectangleRaised(int fid,float xo,float yo,float xl,float yl,int clr,float fac,float bodrsize);
int kgRoundedRectanglePressed(void * fid,float xo,float yo,float xl,float yl,int clr,float fac,float bodrsize);
int kgRoundedRectangleRaised(void * fid,float xo,float yo,float xl,float yl,int clr,float fac,float bodrsize);
void *uiMaskgmImage(GMIMG *png,GMIMG *mask);
int uiPressedBoxFill(void *Dialog,int xo,int yo,int xsize,int ysize,int fillcolor,int bodr,int bodrsize,float rfac);
int uiRoundedBorder(void *Dialog,int xo,int yo,int xsize,int ysize,int bodrcolor,int bodrsize,float rfac);
int uiBoxFill(void *Dialog,int xo,int yo,int xsize,int ysize,int fillcolor,float rfac);
char *Dgetselectmenustring(void *Tmp,int wid);
int Dgetselectmenuitem(void *Tmp,int wid);
int Dsetselectmenuitem(void *Tmp,int wid,int df);
void **Dgetselectmenu(void *Tmp,int wid);
void Dsetselectmenu(void *Tmp,int wid,void **list);
int  Dgetselectsize(void *Tmp,int wid);
void Dupdateselectmenu(void *Tmp,int wid);
void Dmemfreeselectmenu(void *Tmp,int wid);
void Dresetselectmenu(void *Tmp,int wid,char **list,void **xpm,int *sw);
void Dsetbrowser(void *Tmp,int wid,char **list,void **xpm,int *sw);
void Dsetbrowservisibility(void *Tmp,int wid,int hide);
void Dsetprogressbar(void *Tmp,int id,int val);
void Dsetprogressbarvisibility(void *Tmp,int id,int hide);
char **Dgetbrowserlist(void *Tmp,int wid);
int Dgetbrowseritem(void *Tmp,int wid);
void kgSetAntialiasing(DIG *G,int val);
void kgAntialiasingOn(DIG *G,int val);
void kgAntialiasingOff(DIG *G);
void *uiGetAntialiasedImage(char *flname,int xsize,int ysize,void *ligts,int Mag); // background is zero
void uiCopyResizedImage(DIG *G);
void *kgGetResizedImage(void *G);
void *kgInitImage(int width,int height,int mag);
void kgCloseImage(void *Gtmp);
void * kgUndoImage(int size,int red,int green,int blue);
void * kgRedoImage(int size,int red,int green,int blue);
void * kgRightdirImage(int size,int red,int green,int blue);
void * kgLeftdirImage(int size,int red,int green,int blue);
void * kgUpdirImage(int size,int red,int green,int blue);
void * kgDowndirImage(int size,int red,int green,int blue);
void * kgRightImage(int size,int red,int green,int blue);
void * kgLeftImage(int size,int red,int green,int blue);
void * kgUpImage(int size,int red,int green,int blue);
void * kgDownImage(int size,int red,int green,int blue);
void * kgGoback1Image(int size,int red,int green,int blue);
void * kgGobackImage(int size,int red,int green,int blue);
void * kgPowerdownImage(int size,int red,int green,int blue);
void * kgHomeImage(int size,int red,int green,int blue);
void *kgFreeDouble(void **mem);
void **uiGetThumbnails(char *Dir,int size);
char **uiGetMenu(void ** Thumbnails);
int *uiGetSwitch(void ** Thumbnails);
THUMBNAILS uiMakeThumbNails_o(char *dir,int size);
void uiFreeThumbNails_o(THUMBNAILS *tb);
ThumbNail ** uiMakeThumbNails(char *dir,int size);
ThumbNail **uiStringToThumbNails(char **menu);
ThumbNail ** uiFolderThumbNails(char *dir);
ThumbNail ** uiFileThumbNails(char *dir,char *filter);
void uiFreeThumbNails(ThumbNail **tb);
void uiUpdateWidget(void *widget);
void *uiGetWidget(void *Tmp,int id);
void uiSetWidgetVisibility(void *Tmp,int id,int vis);
int uiGetWidgetVisibility(void *Tmp,int id);
void * kgOpenBusy(void *arg,int xo,int yo);
void kgCloseBusy(void * id);
void *kgGetWidget(void *Tmp,int id);
int  kgUpdateTextBox(void *tmp,int no);
void kgUpdateWidget(void *widget);
void kgFreeImage(void *tmp);
/*
   Version 2.1
   Dated 12/07/97
*/

#ifndef D_LINK
#define D_LINK
#include <stdio.h>
#include <ctype.h>
#include <malloc.h>
typedef  struct d_l {
         void  *bf;
         struct d_l *nx;
         struct d_l *pv;
} D_l;
typedef  struct l_L {
         D_l *st; 
         D_l *cr;
         D_l *en;
} Dlink;



Dlink * Dopen(void);
int Ddup( Dlink *S,Dlink *D);
int  Dappend(Dlink *F,void  *buf);
void Dempty(Dlink *F);
void Dfree(Dlink *F);
void Drewind(Dlink *F) ;
void Dend (Dlink *F) ;
void Dmove_back(Dlink *LN,int n) ;
void Dmove_forward(Dlink *LN,int n) ;
void Ddelete_items(Dlink *LN,int n) ;
void Ddelete(Dlink *LN) ;
void Dinsert(Dlink *F,void  *buf) ;
void Dadd(Dlink *F,void  *buf) ;
Dlink *Dcopy(Dlink *LN) ;
Dlink *Dsublist(Dlink *LN,void *s,int Dcondition(void *,void *)) ;
Dlink *Dnewlist(Dlink *LN,void * Dnewrule(void *)) ;
void Dsort(Dlink *LN , int Dcmpitems(void *,void *)) ;
int Dcount(Dlink *F) ;
void Dposition(Dlink *F,int n) ;
int Dsetcurpos(Dlink *LN,void *s,int Dcondition(void *,void *)) ;
Dlink *Djoin(Dlink *d,Dlink *s);
int Disum(Dlink *LN , int Dsumitem(void *)) ;
float Dfsum(Dlink *LN , float Dsumitem(void *)) ;
double Ddsum(Dlink *LN , double Dsumitem(void *)) ;
int comp_list(Dlink *L1,Dlink *L2,int comprecord(void *tmp1,void *tmp2)) ;
void Dcondition(Dlink *F,void *arg, int condition(void *,void *));
int Dread(Dlink **L,FILE *f,void * read_link(FILE *fp));
int Dwrite(Dlink *L,FILE *f,int write_link(FILE *fp,void *buf));
int Dreadauto(Dlink **L,char *flname,int size_of_rec);
int Dwriteauto(Dlink *L,char *flname,int size_of_rec);
int Drmvdup(Dlink *L,int size_of_rec);
int Drmvdup_cond(Dlink *L,int rule(void *,void *));
    /* if rule returns 1 records are same */
void *Resetlink(Dlink *L);
void *Getrecord(Dlink *L);
void *Getrecordrev(Dlink *L);
void* Dpick(Dlink *LN) ; /* like Ddelete but does not free */
#endif /* end of dlink.h */
void kgAddSearchDir(void *Tmp,char *Dir);
void *kgFMGtogmImage(void *tmp);
int kgDragRegion(void *Tmp,int xmin,int ymin,int xmax,int ymax,int *x,int *y);
int kgGetThumbNailItem(DIY *Y,int x,int y);
int kgGetThumbNailItemRectangle(DIY *Y,int item,int *x1,int *y1,int *x2,int *y2);
void kgFreeXImage(void *Img);
void * kgRegionImage(void *Tmp,int xmin,int ymin,int xmax,int ymax);
int kgScrollDownThumbNails (DIY *y);
int kgScrollUpThumbNails (DIY *y);
int  kgDragThumbNail(DIY *Y,int item,int *x,int *y);
int kgPickImage( void *parent,int xo,int yo,void *pt);
void kgDropFocus(void *tmp);
int kgRedrawDialog(DIALOG *Dialog);
void uiPutString(DIALOG *D,char *str,int x1,int y1,int char_clr,int Font,int FontSize);
void uiMakeBrowserImages(DIW *W);
void uiCleanBrowserImages(DIW *w);
void uiCleanEbrowserImages(DIE *w);
void uiMakeEbrowserImages(DIE *w,int length);
void uiCleanXImages(DIX *w);
void uiCleanRImages(DIRA *w);
void uiCleanCImages(DICH *w);
void uiCleanYImages(DIY *w);
void uiMakeXImages(DIX *w,int length);
void uiMakeRImages(DIRA *w,int length);
void uiMakeRCmages(DICH *w,int length);
void uiMakeYCmages(DIY *w);
int Base64encode_len(int len);
int Base64encode( char *encoded,const unsigned char *string, int len);
char *Base64Encode(const unsigned char *blob, const size_t blob_length,size_t *encode_length);
void uiCleanTextBoxImages(DIT *T);
void uiCleanButtonBoxImages(void *Tmp);
void *_uiGetWidgetBimg(void *Widget);
void uiMakeFontlist(void);
Dlink *uiGetFontlist(void);
void uiInitGm(void);
#endif
