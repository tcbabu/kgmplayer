.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.0102 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "RAND_load_file 3"
.TH RAND_load_file 3 2016-05-03 1.0.2h OpenSSL
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
RAND_load_file, RAND_write_file, RAND_file_name \- PRNG seed file
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/rand.h>
\&
\& const char *RAND_file_name(char *buf, size_t num);
\&
\& int RAND_load_file(const char *filename, long max_bytes);
\&
\& int RAND_write_file(const char *filename);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
\&\fBRAND_file_name()\fR generates a default path for the random seed
file. \fBbuf\fR points to a buffer of size \fBnum\fR in which to store the
filename. The seed file is \f(CW$RANDFILE\fR if that environment variable is
set, \f(CW$HOME\fR/.rnd otherwise. If \f(CW$HOME\fR is not set either, or \fBnum\fR is
too small for the path name, an error occurs.
.PP
\&\fBRAND_load_file()\fR reads a number of bytes from file \fBfilename\fR and
adds them to the PRNG. If \fBmax_bytes\fR is non-negative,
up to to \fBmax_bytes\fR are read; starting with OpenSSL 0.9.5,
if \fBmax_bytes\fR is \-1, the complete file is read.
.PP
\&\fBRAND_write_file()\fR writes a number of random bytes (currently 1024) to
file \fBfilename\fR which can be used to initialize the PRNG by calling
\&\fBRAND_load_file()\fR in a later session.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
\&\fBRAND_load_file()\fR returns the number of bytes read.
.PP
\&\fBRAND_write_file()\fR returns the number of bytes written, and \-1 if the
bytes written were generated without appropriate seed.
.PP
\&\fBRAND_file_name()\fR returns a pointer to \fBbuf\fR on success, and NULL on
error.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBrand\fR\|(3), \fBRAND_add\fR\|(3), \fBRAND_cleanup\fR\|(3)
.SH HISTORY
.IX Header "HISTORY"
\&\fBRAND_load_file()\fR, \fBRAND_write_file()\fR and \fBRAND_file_name()\fR are available in
all versions of SSLeay and OpenSSL.
