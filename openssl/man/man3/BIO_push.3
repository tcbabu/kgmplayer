.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.0102 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "BIO_push 3"
.TH BIO_push 3 2016-05-03 1.0.2h OpenSSL
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
BIO_push, BIO_pop \- add and remove BIOs from a chain.
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/bio.h>
\&
\& BIO *  BIO_push(BIO *b,BIO *append);
\& BIO *  BIO_pop(BIO *b);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
The \fBBIO_push()\fR function appends the BIO \fBappend\fR to \fBb\fR, it returns
\&\fBb\fR.
.PP
\&\fBBIO_pop()\fR removes the BIO \fBb\fR from a chain and returns the next BIO
in the chain, or NULL if there is no next BIO. The removed BIO then
becomes a single BIO with no association with the original chain,
it can thus be freed or attached to a different chain.
.SH NOTES
.IX Header "NOTES"
The names of these functions are perhaps a little misleading. \fBBIO_push()\fR
joins two BIO chains whereas \fBBIO_pop()\fR deletes a single BIO from a chain,
the deleted BIO does not need to be at the end of a chain.
.PP
The process of calling \fBBIO_push()\fR and \fBBIO_pop()\fR on a BIO may have additional
consequences (a control call is made to the affected BIOs) any effects will
be noted in the descriptions of individual BIOs.
.SH EXAMPLES
.IX Header "EXAMPLES"
For these examples suppose \fBmd1\fR and \fBmd2\fR are digest BIOs, \fBb64\fR is
a base64 BIO and \fBf\fR is a file BIO.
.PP
If the call:
.PP
.Vb 1
\& BIO_push(b64, f);
.Ve
.PP
is made then the new chain will be \fBb64\-f\fR. After making the calls
.PP
.Vb 2
\& BIO_push(md2, b64);
\& BIO_push(md1, md2);
.Ve
.PP
the new chain is \fBmd1\-md2\-b64\-f\fR. Data written to \fBmd1\fR will be digested
by \fBmd1\fR and \fBmd2\fR, \fBbase64\fR encoded and written to \fBf\fR.
.PP
It should be noted that reading causes data to pass in the reverse
direction, that is data is read from \fBf\fR, base64 \fBdecoded\fR and digested
by \fBmd1\fR and \fBmd2\fR. If the call:
.PP
.Vb 1
\& BIO_pop(md2);
.Ve
.PP
The call will return \fBb64\fR and the new chain will be \fBmd1\-b64\-f\fR data can
be written to \fBmd1\fR as before.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
\&\fBBIO_push()\fR returns the end of the chain, \fBb\fR.
.PP
\&\fBBIO_pop()\fR returns the next BIO in the chain, or NULL if there is no next
BIO.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
TBA
