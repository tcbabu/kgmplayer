.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.0102 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "buffer 3"
.TH buffer 3 2016-05-03 1.0.2h OpenSSL
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
BUF_MEM_new, BUF_MEM_new_ex, BUF_MEM_free, BUF_MEM_grow \- simple
character array structure
.PP
BUF_strdup, BUF_strndup, BUF_memdup, BUF_strlcpy, BUF_strlcat \-
standard C library equivalents
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/buffer.h>
\&
\& BUF_MEM *BUF_MEM_new(void);
\&
\& void   BUF_MEM_free(BUF_MEM *a);
\&
\& int    BUF_MEM_grow(BUF_MEM *str, int len);
\&
\& char *BUF_strdup(const char *str);
\&
\& char *BUF_strndup(const char *str, size_t siz);
\&
\& void *BUF_memdup(const void *data, size_t siz);
\&
\& size_t BUF_strlcpy(char *dst, const char *src, size_t size);
\&
\& size_t BUF_strlcat(char *dst, const char *src, size_t size);
\&
\& size_t BUF_strnlen(const char *str, size_t maxlen);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
The buffer library handles simple character arrays. Buffers are used for
various purposes in the library, most notably memory BIOs.
.PP
\&\fBBUF_MEM_new()\fR allocates a new buffer of zero size.
.PP
\&\fBBUF_MEM_free()\fR frees up an already existing buffer. The data is zeroed
before freeing up in case the buffer contains sensitive data.
.PP
\&\fBBUF_MEM_grow()\fR changes the size of an already existing buffer to
\&\fBlen\fR. Any data already in the buffer is preserved if it increases in
size.
.PP
\&\fBBUF_strdup()\fR, \fBBUF_strndup()\fR, \fBBUF_memdup()\fR, \fBBUF_strlcpy()\fR,
\&\fBBUF_strlcat()\fR and BUF_strnlen are equivalents of the standard C
library functions. The \fBdup()\fR functions use \fBOPENSSL_malloc()\fR underneath
and so should be used in preference to the standard library for memory
leak checking or replacing the \fBmalloc()\fR function.
.PP
Memory allocated from these functions should be freed up using the
\&\fBOPENSSL_free()\fR function.
.PP
BUF_strndup makes the explicit guarantee that it will never read past
the first \fBsiz\fR bytes of \fBstr\fR.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
\&\fBBUF_MEM_new()\fR returns the buffer or NULL on error.
.PP
\&\fBBUF_MEM_free()\fR has no return value.
.PP
\&\fBBUF_MEM_grow()\fR returns zero on error or the new size (i.e. \fBlen\fR).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBbio\fR\|(3)
.SH HISTORY
.IX Header "HISTORY"
\&\fBBUF_MEM_new()\fR, \fBBUF_MEM_free()\fR and \fBBUF_MEM_grow()\fR are available in all
versions of SSLeay and OpenSSL. \fBBUF_strdup()\fR was added in SSLeay 0.8.
