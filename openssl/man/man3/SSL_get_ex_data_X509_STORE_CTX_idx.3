.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.0102 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SSL_get_ex_data_X509_STORE_CTX_idx 3"
.TH SSL_get_ex_data_X509_STORE_CTX_idx 3 2016-05-03 1.0.2h OpenSSL
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
SSL_get_ex_data_X509_STORE_CTX_idx \- get ex_data index to access SSL structure
from X509_STORE_CTX
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/ssl.h>
\&
\& int SSL_get_ex_data_X509_STORE_CTX_idx(void);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
\&\fBSSL_get_ex_data_X509_STORE_CTX_idx()\fR returns the index number under which
the pointer to the SSL object is stored into the X509_STORE_CTX object.
.SH NOTES
.IX Header "NOTES"
Whenever a X509_STORE_CTX object is created for the verification of the
peers certificate during a handshake, a pointer to the SSL object is
stored into the X509_STORE_CTX object to identify the connection affected.
To retrieve this pointer the \fBX509_STORE_CTX_get_ex_data()\fR function can
be used with the correct index. This index is globally the same for all
X509_STORE_CTX objects and can be retrieved using
\&\fBSSL_get_ex_data_X509_STORE_CTX_idx()\fR. The index value is set when
\&\fBSSL_get_ex_data_X509_STORE_CTX_idx()\fR is first called either by the application
program directly or indirectly during other SSL setup functions or during
the handshake.
.PP
The value depends on other index values defined for X509_STORE_CTX objects
before the SSL index is created.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
.IP >=0 4
.IX Item ">=0"
The index value to access the pointer.
.IP <0 4
.IX Item "<0"
An error occurred, check the error stack for a detailed error message.
.SH EXAMPLES
.IX Header "EXAMPLES"
The index returned from \fBSSL_get_ex_data_X509_STORE_CTX_idx()\fR allows to
access the SSL object for the connection to be accessed during the
\&\fBverify_callback()\fR when checking the peers certificate. Please check
the example in \fBSSL_CTX_set_verify\fR\|(3),
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBssl\fR\|(3), \fBSSL_CTX_set_verify\fR\|(3),
\&\fBCRYPTO_set_ex_data\fR\|(3)
