.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.0102 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "EVP_DigestInit 3"
.TH EVP_DigestInit 3 2016-05-03 1.0.2h OpenSSL
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
EVP_MD_CTX_init, EVP_MD_CTX_create, EVP_DigestInit_ex, EVP_DigestUpdate,
EVP_DigestFinal_ex, EVP_MD_CTX_cleanup, EVP_MD_CTX_destroy, EVP_MAX_MD_SIZE,
EVP_MD_CTX_copy_ex, EVP_DigestInit, EVP_DigestFinal, EVP_MD_CTX_copy, EVP_MD_type,
EVP_MD_pkey_type, EVP_MD_size, EVP_MD_block_size, EVP_MD_CTX_md, EVP_MD_CTX_size,
EVP_MD_CTX_block_size, EVP_MD_CTX_type, EVP_md_null, EVP_md2, EVP_md5, EVP_sha, EVP_sha1,
EVP_sha224, EVP_sha256, EVP_sha384, EVP_sha512, EVP_dss, EVP_dss1, EVP_mdc2,
EVP_ripemd160, EVP_get_digestbyname, EVP_get_digestbynid, EVP_get_digestbyobj \-
EVP digest routines
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/evp.h>
\&
\& void EVP_MD_CTX_init(EVP_MD_CTX *ctx);
\& EVP_MD_CTX *EVP_MD_CTX_create(void);
\&
\& int EVP_DigestInit_ex(EVP_MD_CTX *ctx, const EVP_MD *type, ENGINE *impl);
\& int EVP_DigestUpdate(EVP_MD_CTX *ctx, const void *d, size_t cnt);
\& int EVP_DigestFinal_ex(EVP_MD_CTX *ctx, unsigned char *md,
\&        unsigned int *s);
\&
\& int EVP_MD_CTX_cleanup(EVP_MD_CTX *ctx);
\& void EVP_MD_CTX_destroy(EVP_MD_CTX *ctx);
\&
\& int EVP_MD_CTX_copy_ex(EVP_MD_CTX *out,const EVP_MD_CTX *in);
\&
\& int EVP_DigestInit(EVP_MD_CTX *ctx, const EVP_MD *type);
\& int EVP_DigestFinal(EVP_MD_CTX *ctx, unsigned char *md,
\&        unsigned int *s);
\&
\& int EVP_MD_CTX_copy(EVP_MD_CTX *out,EVP_MD_CTX *in);
\&
\& #define EVP_MAX_MD_SIZE 64     /* SHA512 */
\&
\& int EVP_MD_type(const EVP_MD *md);
\& int EVP_MD_pkey_type(const EVP_MD *md);        
\& int EVP_MD_size(const EVP_MD *md);
\& int EVP_MD_block_size(const EVP_MD *md);
\&
\& const EVP_MD *EVP_MD_CTX_md(const EVP_MD_CTX *ctx);
\& #define EVP_MD_CTX_size(e)             EVP_MD_size(EVP_MD_CTX_md(e))
\& #define EVP_MD_CTX_block_size(e)       EVP_MD_block_size((e)\->digest)
\& #define EVP_MD_CTX_type(e)             EVP_MD_type((e)\->digest)
\&
\& const EVP_MD *EVP_md_null(void);
\& const EVP_MD *EVP_md2(void);
\& const EVP_MD *EVP_md5(void);
\& const EVP_MD *EVP_sha(void);
\& const EVP_MD *EVP_sha1(void);
\& const EVP_MD *EVP_dss(void);
\& const EVP_MD *EVP_dss1(void);
\& const EVP_MD *EVP_mdc2(void);
\& const EVP_MD *EVP_ripemd160(void);
\&
\& const EVP_MD *EVP_sha224(void);
\& const EVP_MD *EVP_sha256(void);
\& const EVP_MD *EVP_sha384(void);
\& const EVP_MD *EVP_sha512(void);
\&
\& const EVP_MD *EVP_get_digestbyname(const char *name);
\& #define EVP_get_digestbynid(a) EVP_get_digestbyname(OBJ_nid2sn(a))
\& #define EVP_get_digestbyobj(a) EVP_get_digestbynid(OBJ_obj2nid(a))
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
The EVP digest routines are a high level interface to message digests.
.PP
\&\fBEVP_MD_CTX_init()\fR initializes digest context \fBctx\fR.
.PP
\&\fBEVP_MD_CTX_create()\fR allocates, initializes and returns a digest context.
.PP
\&\fBEVP_DigestInit_ex()\fR sets up digest context \fBctx\fR to use a digest
\&\fBtype\fR from ENGINE \fBimpl\fR. \fBctx\fR must be initialized before calling this
function. \fBtype\fR will typically be supplied by a functionsuch as \fBEVP_sha1()\fR.
If \fBimpl\fR is NULL then the default implementation of digest \fBtype\fR is used.
.PP
\&\fBEVP_DigestUpdate()\fR hashes \fBcnt\fR bytes of data at \fBd\fR into the
digest context \fBctx\fR. This function can be called several times on the
same \fBctx\fR to hash additional data.
.PP
\&\fBEVP_DigestFinal_ex()\fR retrieves the digest value from \fBctx\fR and places
it in \fBmd\fR. If the \fBs\fR parameter is not NULL then the number of
bytes of data written (i.e. the length of the digest) will be written
to the integer at \fBs\fR, at most \fBEVP_MAX_MD_SIZE\fR bytes will be written.
After calling \fBEVP_DigestFinal_ex()\fR no additional calls to \fBEVP_DigestUpdate()\fR
can be made, but \fBEVP_DigestInit_ex()\fR can be called to initialize a new
digest operation.
.PP
\&\fBEVP_MD_CTX_cleanup()\fR cleans up digest context \fBctx\fR, it should be called
after a digest context is no longer needed.
.PP
\&\fBEVP_MD_CTX_destroy()\fR cleans up digest context \fBctx\fR and frees up the
space allocated to it, it should be called only on a context created
using \fBEVP_MD_CTX_create()\fR.
.PP
\&\fBEVP_MD_CTX_copy_ex()\fR can be used to copy the message digest state from
\&\fBin\fR to \fBout\fR. This is useful if large amounts of data are to be
hashed which only differ in the last few bytes. \fBout\fR must be initialized
before calling this function.
.PP
\&\fBEVP_DigestInit()\fR behaves in the same way as \fBEVP_DigestInit_ex()\fR except
the passed context \fBctx\fR does not have to be initialized, and it always
uses the default digest implementation.
.PP
\&\fBEVP_DigestFinal()\fR is similar to \fBEVP_DigestFinal_ex()\fR except the digest
context \fBctx\fR is automatically cleaned up.
.PP
\&\fBEVP_MD_CTX_copy()\fR is similar to \fBEVP_MD_CTX_copy_ex()\fR except the destination
\&\fBout\fR does not have to be initialized.
.PP
\&\fBEVP_MD_size()\fR and \fBEVP_MD_CTX_size()\fR return the size of the message digest
when passed an \fBEVP_MD\fR or an \fBEVP_MD_CTX\fR structure, i.e. the size of the
hash.
.PP
\&\fBEVP_MD_block_size()\fR and \fBEVP_MD_CTX_block_size()\fR return the block size of the
message digest when passed an \fBEVP_MD\fR or an \fBEVP_MD_CTX\fR structure.
.PP
\&\fBEVP_MD_type()\fR and \fBEVP_MD_CTX_type()\fR return the NID of the OBJECT IDENTIFIER
representing the given message digest when passed an \fBEVP_MD\fR structure.
For example EVP_MD_type(\fBEVP_sha1()\fR) returns \fBNID_sha1\fR. This function is
normally used when setting ASN1 OIDs.
.PP
\&\fBEVP_MD_CTX_md()\fR returns the \fBEVP_MD\fR structure corresponding to the passed
\&\fBEVP_MD_CTX\fR.
.PP
\&\fBEVP_MD_pkey_type()\fR returns the NID of the public key signing algorithm associated
with this digest. For example \fBEVP_sha1()\fR is associated with RSA so this will
return \fBNID_sha1WithRSAEncryption\fR. Since digests and signature algorithms
are no longer linked this function is only retained for compatibility
reasons.
.PP
\&\fBEVP_md2()\fR, \fBEVP_md5()\fR, \fBEVP_sha()\fR, \fBEVP_sha1()\fR, \fBEVP_sha224()\fR, \fBEVP_sha256()\fR,
\&\fBEVP_sha384()\fR, \fBEVP_sha512()\fR, \fBEVP_mdc2()\fR and \fBEVP_ripemd160()\fR return \fBEVP_MD\fR
structures for the MD2, MD5, SHA, SHA1, SHA224, SHA256, SHA384, SHA512, MDC2
and RIPEMD160 digest algorithms respectively.
.PP
\&\fBEVP_dss()\fR and \fBEVP_dss1()\fR return \fBEVP_MD\fR structures for SHA and SHA1 digest
algorithms but using DSS (DSA) for the signature algorithm. Note: there is
no need to use these pseudo-digests in OpenSSL 1.0.0 and later, they are
however retained for compatibility.
.PP
\&\fBEVP_md_null()\fR is a "null" message digest that does nothing: i.e. the hash it
returns is of zero length.
.PP
\&\fBEVP_get_digestbyname()\fR, \fBEVP_get_digestbynid()\fR and \fBEVP_get_digestbyobj()\fR
return an \fBEVP_MD\fR structure when passed a digest name, a digest NID or
an ASN1_OBJECT structure respectively. The digest table must be initialized
using, for example, \fBOpenSSL_add_all_digests()\fR for these functions to work.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
\&\fBEVP_DigestInit_ex()\fR, \fBEVP_DigestUpdate()\fR and \fBEVP_DigestFinal_ex()\fR return 1 for
success and 0 for failure.
.PP
\&\fBEVP_MD_CTX_copy_ex()\fR returns 1 if successful or 0 for failure.
.PP
\&\fBEVP_MD_type()\fR, \fBEVP_MD_pkey_type()\fR and \fBEVP_MD_type()\fR return the NID of the
corresponding OBJECT IDENTIFIER or NID_undef if none exists.
.PP
\&\fBEVP_MD_size()\fR, \fBEVP_MD_block_size()\fR, \fBEVP_MD_CTX_size()\fR and
\&\fBEVP_MD_CTX_block_size()\fR return the digest or block size in bytes.
.PP
\&\fBEVP_md_null()\fR, \fBEVP_md2()\fR, \fBEVP_md5()\fR, \fBEVP_sha()\fR, \fBEVP_sha1()\fR, \fBEVP_dss()\fR,
\&\fBEVP_dss1()\fR, \fBEVP_mdc2()\fR and \fBEVP_ripemd160()\fR return pointers to the
corresponding EVP_MD structures.
.PP
\&\fBEVP_get_digestbyname()\fR, \fBEVP_get_digestbynid()\fR and \fBEVP_get_digestbyobj()\fR
return either an \fBEVP_MD\fR structure or NULL if an error occurs.
.SH NOTES
.IX Header "NOTES"
The \fBEVP\fR interface to message digests should almost always be used in
preference to the low level interfaces. This is because the code then becomes
transparent to the digest used and much more flexible.
.PP
New applications should use the SHA2 digest algorithms such as SHA256.
The other digest algorithms are still in common use.
.PP
For most applications the \fBimpl\fR parameter to \fBEVP_DigestInit_ex()\fR will be
set to NULL to use the default digest implementation.
.PP
The functions \fBEVP_DigestInit()\fR, \fBEVP_DigestFinal()\fR and \fBEVP_MD_CTX_copy()\fR are
obsolete but are retained to maintain compatibility with existing code. New
applications should use \fBEVP_DigestInit_ex()\fR, \fBEVP_DigestFinal_ex()\fR and
\&\fBEVP_MD_CTX_copy_ex()\fR because they can efficiently reuse a digest context
instead of initializing and cleaning it up on each call and allow non default
implementations of digests to be specified.
.PP
In OpenSSL 0.9.7 and later if digest contexts are not cleaned up after use
memory leaks will occur.
.PP
Stack allocation of EVP_MD_CTX structures is common, for example:
.PP
.Vb 2
\& EVP_MD_CTX mctx;
\& EVP_MD_CTX_init(&mctx);
.Ve
.PP
This will cause binary compatibility issues if the size of EVP_MD_CTX
structure changes (this will only happen with a major release of OpenSSL).
Applications wishing to avoid this should use \fBEVP_MD_CTX_create()\fR instead:
.PP
.Vb 2
\& EVP_MD_CTX *mctx;
\& mctx = EVP_MD_CTX_create();
.Ve
.SH EXAMPLE
.IX Header "EXAMPLE"
This example digests the data "Test Message\en" and "Hello World\en", using the
digest name passed on the command line.
.PP
.Vb 2
\& #include <stdio.h>
\& #include <openssl/evp.h>
\&
\& main(int argc, char *argv[])
\& {
\& EVP_MD_CTX *mdctx;
\& const EVP_MD *md;
\& char mess1[] = "Test Message\en";
\& char mess2[] = "Hello World\en";
\& unsigned char md_value[EVP_MAX_MD_SIZE];
\& int md_len, i;
\&
\& OpenSSL_add_all_digests();
\&
\& if(!argv[1]) {
\&        printf("Usage: mdtest digestname\en");
\&        exit(1);
\& }
\&
\& md = EVP_get_digestbyname(argv[1]);
\&
\& if(!md) {
\&        printf("Unknown message digest %s\en", argv[1]);
\&        exit(1);
\& }
\&
\& mdctx = EVP_MD_CTX_create();
\& EVP_DigestInit_ex(mdctx, md, NULL);
\& EVP_DigestUpdate(mdctx, mess1, strlen(mess1));
\& EVP_DigestUpdate(mdctx, mess2, strlen(mess2));
\& EVP_DigestFinal_ex(mdctx, md_value, &md_len);
\& EVP_MD_CTX_destroy(mdctx);
\&
\& printf("Digest is: ");
\& for(i = 0; i < md_len; i++)
\&        printf("%02x", md_value[i]);
\& printf("\en");
\&
\& /* Call this once before exit. */
\& EVP_cleanup();
\& exit(0);
\& }
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBdgst\fR\|(1),
\&\fBevp\fR\|(3)
.SH HISTORY
.IX Header "HISTORY"
\&\fBEVP_DigestInit()\fR, \fBEVP_DigestUpdate()\fR and \fBEVP_DigestFinal()\fR are
available in all versions of SSLeay and OpenSSL.
.PP
\&\fBEVP_MD_CTX_init()\fR, \fBEVP_MD_CTX_create()\fR, \fBEVP_MD_CTX_copy_ex()\fR,
\&\fBEVP_MD_CTX_cleanup()\fR, \fBEVP_MD_CTX_destroy()\fR, \fBEVP_DigestInit_ex()\fR
and \fBEVP_DigestFinal_ex()\fR were added in OpenSSL 0.9.7.
.PP
\&\fBEVP_md_null()\fR, \fBEVP_md2()\fR, \fBEVP_md5()\fR, \fBEVP_sha()\fR, \fBEVP_sha1()\fR,
\&\fBEVP_dss()\fR, \fBEVP_dss1()\fR, \fBEVP_mdc2()\fR and \fBEVP_ripemd160()\fR were
changed to return truly const EVP_MD * in OpenSSL 0.9.7.
.PP
The link between digests and signing algorithms was fixed in OpenSSL 1.0 and
later, so now \fBEVP_sha1()\fR can be used with RSA and DSA; there is no need to
use \fBEVP_dss1()\fR any more.
.PP
OpenSSL 1.0 and later does not include the MD2 digest algorithm in the
default configuration due to its security weaknesses.
