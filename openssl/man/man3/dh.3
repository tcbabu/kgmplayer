.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.0102 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "dh 3"
.TH dh 3 2016-05-03 1.0.2h OpenSSL
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
dh \- Diffie\-Hellman key agreement
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 2
\& #include <openssl/dh.h>
\& #include <openssl/engine.h>
\&
\& DH *   DH_new(void);
\& void   DH_free(DH *dh);
\&
\& int    DH_size(const DH *dh);
\&
\& DH *   DH_generate_parameters(int prime_len, int generator,
\&                void (*callback)(int, int, void *), void *cb_arg);
\& int    DH_check(const DH *dh, int *codes);
\&
\& int    DH_generate_key(DH *dh);
\& int    DH_compute_key(unsigned char *key, BIGNUM *pub_key, DH *dh);
\&
\& void DH_set_default_method(const DH_METHOD *meth);
\& const DH_METHOD *DH_get_default_method(void);
\& int DH_set_method(DH *dh, const DH_METHOD *meth);
\& DH *DH_new_method(ENGINE *engine);
\& const DH_METHOD *DH_OpenSSL(void);
\&
\& int DH_get_ex_new_index(long argl, char *argp, int (*new_func)(),
\&             int (*dup_func)(), void (*free_func)());
\& int DH_set_ex_data(DH *d, int idx, char *arg);
\& char *DH_get_ex_data(DH *d, int idx);
\&
\& DH *   d2i_DHparams(DH **a, unsigned char **pp, long length);
\& int    i2d_DHparams(const DH *a, unsigned char **pp);
\&
\& int    DHparams_print_fp(FILE *fp, const DH *x);
\& int    DHparams_print(BIO *bp, const DH *x);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
These functions implement the Diffie-Hellman key agreement protocol.
The generation of shared DH parameters is described in
\&\fBDH_generate_parameters\fR\|(3); \fBDH_generate_key\fR\|(3) describes how
to perform a key agreement.
.PP
The \fBDH\fR structure consists of several BIGNUM components.
.PP
.Vb 9
\& struct
\&        {
\&        BIGNUM *p;              // prime number (shared)
\&        BIGNUM *g;              // generator of Z_p (shared)
\&        BIGNUM *priv_key;       // private DH value x
\&        BIGNUM *pub_key;        // public DH value g^x
\&        // ...
\&        };
\& DH
.Ve
.PP
Note that DH keys may use non-standard \fBDH_METHOD\fR implementations,
either directly or by the use of \fBENGINE\fR modules. In some cases (eg. an
ENGINE providing support for hardware-embedded keys), these BIGNUM values
will not be used by the implementation or may be used for alternative data
storage. For this reason, applications should generally avoid using DH
structure elements directly and instead use API functions to query or
modify keys.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBdhparam\fR\|(1), \fBbn\fR\|(3), \fBdsa\fR\|(3), \fBerr\fR\|(3),
\&\fBrand\fR\|(3), \fBrsa\fR\|(3), \fBengine\fR\|(3),
\&\fBDH_set_method\fR\|(3), \fBDH_new\fR\|(3),
\&\fBDH_get_ex_new_index\fR\|(3),
\&\fBDH_generate_parameters\fR\|(3),
\&\fBDH_compute_key\fR\|(3), \fBd2i_DHparams\fR\|(3),
\&\fBRSA_print\fR\|(3)
