.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.0102 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "BN_CTX_new 3"
.TH BN_CTX_new 3 2016-05-03 1.0.2h OpenSSL
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
BN_CTX_new, BN_CTX_init, BN_CTX_free \- allocate and free BN_CTX structures
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/bn.h>
\&
\& BN_CTX *BN_CTX_new(void);
\&
\& void BN_CTX_free(BN_CTX *c);
.Ve
.PP
Deprecated:
.PP
.Vb 1
\& void BN_CTX_init(BN_CTX *c);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
A \fBBN_CTX\fR is a structure that holds \fBBIGNUM\fR temporary variables used by
library functions. Since dynamic memory allocation to create \fBBIGNUM\fRs
is rather expensive when used in conjunction with repeated subroutine
calls, the \fBBN_CTX\fR structure is used.
.PP
\&\fBBN_CTX_new()\fR allocates and initializes a \fBBN_CTX\fR
structure.
.PP
\&\fBBN_CTX_free()\fR frees the components of the \fBBN_CTX\fR, and if it was
created by \fBBN_CTX_new()\fR, also the structure itself.
If \fBBN_CTX_start\fR\|(3) has been used on the \fBBN_CTX\fR,
\&\fBBN_CTX_end\fR\|(3) must be called before the \fBBN_CTX\fR
may be freed by \fBBN_CTX_free()\fR.
.PP
\&\fBBN_CTX_init()\fR (deprecated) initializes an existing uninitialized \fBBN_CTX\fR.
This should not be used for new programs. Use \fBBN_CTX_new()\fR instead.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
\&\fBBN_CTX_new()\fR returns a pointer to the \fBBN_CTX\fR. If the allocation fails,
it returns \fBNULL\fR and sets an error code that can be obtained by
\&\fBERR_get_error\fR\|(3).
.PP
\&\fBBN_CTX_init()\fR and \fBBN_CTX_free()\fR have no return values.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBbn\fR\|(3), \fBERR_get_error\fR\|(3), \fBBN_add\fR\|(3),
\&\fBBN_CTX_start\fR\|(3)
.SH HISTORY
.IX Header "HISTORY"
\&\fBBN_CTX_new()\fR and \fBBN_CTX_free()\fR are available in all versions on SSLeay
and OpenSSL. \fBBN_CTX_init()\fR was added in SSLeay 0.9.1b.
